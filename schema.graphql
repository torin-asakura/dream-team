# This file was generated. Do not edit manually.

schema {
  query: RootQuery
  mutation: RootMutation
}

"A Field Group registered by ACF"
interface AcfFieldGroup {
  "The name of the ACF Field Group"
  fieldGroupName: String
}

"The author of a comment"
interface Commenter {
  "Identifies the primary key from the database."
  databaseId: Int!
  "The email address of the author of a comment."
  email: String
  "The globally unique identifier for the comment author."
  id: ID!
  "Whether the author information is considered restricted. (not fully public)"
  isRestricted: Boolean
  "The name of the author of a comment."
  name: String
  "The url of the author of a comment."
  url: String
}

"Nodes used to manage content"
interface ContentNode {
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The ID of the node in the database."
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The unique resource identifier path"
  uri: String
}

"The template assigned to a node of content"
interface ContentTemplate {
  "The name of the template"
  templateName: String
}

"Object that can be identified with a Database ID"
interface DatabaseIdentifier {
  "The unique identifier stored in the database"
  databaseId: Int!
}

"Asset enqueued by the CMS"
interface EnqueuedAsset {
  "@todo"
  args: Boolean
  "Dependencies needed to use this asset"
  dependencies: [EnqueuedScript]
  "Extra information needed for the script"
  extra: String
  "The handle of the enqueued asset"
  handle: String
  "The ID of the enqueued asset"
  id: ID!
  "The source of the asset"
  src: String
  "The version of the enqueued asset"
  version: String
}

"Action object"
interface FormField {
  "Creation date"
  createdAt: Int
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label of the field"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Content node with hierarchical (parent/child) relationships"
interface HierarchicalContentNode {
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
}

"Term node with hierarchical (parent/child) relationships"
interface HierarchicalTermNode {
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
}

"Nodes that can be linked to as Menu Items"
interface MenuItemLinkable {
  "The unique resource identifier path"
  databaseId: Int!
  "The unique resource identifier path"
  id: ID!
  "The unique resource identifier path"
  uri: String
}

"An object with an ID"
interface Node {
  "The globally unique ID for the object"
  id: ID!
}

"A node that can have an author assigned to it"
interface NodeWithAuthor {
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
}

"A node that can have comments associated with it"
interface NodeWithComments {
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
}

"A node that supports the content editor"
interface NodeWithContentEditor {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
}

"A node that can have an excerpt"
interface NodeWithExcerpt {
  "The excerpt of the post."
  excerpt("Format of the field output" format: PostObjectFieldFormatEnum): String
}

"A node that can have a featured image set"
interface NodeWithFeaturedImage {
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The unique resource identifier path"
  uri: String
}

"A node that can have page attributes"
interface NodeWithPageAttributes {
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
}

"A node that can have revisions"
interface NodeWithRevisions {
  "True if the node is a revision of another node"
  isRevision: Boolean
  "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
}

"A node that can have a template associated with it"
interface NodeWithTemplate {
  "The template assigned to the node"
  template: ContentTemplate
}

"A node that NodeWith a title"
interface NodeWithTitle {
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
}

"A node that can have trackbacks and pingbacks"
interface NodeWithTrackbacks {
  "Whether the pings are open or closed for this particular post."
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "URLs queued to be pinged."
  toPing: [String]
}

"Terms are nodes within a Taxonomy, used to group and relate other nodes."
interface TermNode {
  "The number of objects connected to the object"
  count: Int
  "Identifies the primary key from the database."
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "The unique resource identifier path"
  uri: String
}

"Any node that has a URI"
interface UniformResourceIdentifiable {
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The unique resource identifier path"
  uri: String
}

"A union of Content Node Types that support revisions"
union ContentRevisionUnion = Page | Post

"Deprecated in favor of MenuItemLinkeable Interface"
union MenuItemObjectUnion =
    AboutItem
  | Category
  | ContactItem
  | FeedbackItem
  | FooterItem
  | Fragment
  | HeroItem
  | Messenger
  | NavigationItem
  | Page
  | Post
  | PrivacyPolicyItem
  | Recruit
  | Review
  | Skill
  | SkillCategory
  | SocialNetwork
  | Tag

"Union between the post, page and media item types"
union PostObjectUnion =
    AboutItem
  | ContactItem
  | FeedbackItem
  | FooterItem
  | Fragment
  | HeroItem
  | MediaItem
  | Messenger
  | NavigationItem
  | Page
  | Post
  | PrivacyPolicyItem
  | Recruit
  | Review
  | Skill
  | SocialNetwork

union Review_Review_Skills = Skill

"Union between the Category, Tag and PostFormatPost types"
union TermObjectUnion = Category | PostFormat | SkillCategory | Tag

"The AboutItem type"
type AboutItem implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The id field matches the WP_Post-&gt;ID field."
  aboutItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: AboutItem_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the about_fragments object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the AboutItem type and the AboutItem type"
  preview: AboutItemToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the AboutItem"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the AboutItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: AboutItemToTermNodeConnectionWhereArgs
  ): AboutItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): AboutItem
  "List all translated versions of this post"
  translations: [AboutItem]
  "The unique resource identifier path"
  uri: String
}

"Connection between the AboutItem type and the AboutItem type"
type AboutItemToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: AboutItem
}

"Connection between the AboutItem type and the TermNode type"
type AboutItemToTermNodeConnection {
  "Edges for the AboutItemToTermNodeConnection connection"
  edges: [AboutItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type AboutItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type AboutItem_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"ACF Link field"
type AcfLink {
  "The target of the link (_blank, etc)"
  target: String
  "The title of the link"
  title: String
  "The url of the link"
  url: String
}

"Address 2"
type Address2Field implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: Address2FieldClasses
  "Creation date"
  createdAt: Int
  "Custom Mask"
  customMask: String
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: Address2FieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: Address2FieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: Address2FieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Input Mask"
  mask: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type Address2FieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type Address2FieldDescription {
  descText: String
}

"Help Text"
type Address2FieldHelp {
  helpText: String
}

"Limit Input to this Number"
type Address2FieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"Address"
type AddressField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: AddressFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Mask"
  customMask: String
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: AddressFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: AddressFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: AddressFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Input Mask"
  mask: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type AddressFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type AddressFieldDescription {
  descText: String
}

"Help Text"
type AddressFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type AddressFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from."
type Avatar {
  "URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo)."
  default: String
  "HTML attributes to insert in the IMG element. Is not sanitized."
  extraAttr: String
  "Whether to always show the default image, never the Gravatar."
  forceDefault: Boolean
  "Whether the avatar was successfully found."
  foundAvatar: Boolean
  "Height of the avatar image."
  height: Int
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order."
  rating: String
  "Type of url scheme to use. Typically HTTP vs. HTTPS."
  scheme: String
  "The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image."
  size: Int
  "URL for the gravatar image source."
  url: String
  "Width of the avatar image."
  width: Int
}

"Button"
type ButtonField implements DatabaseIdentifier & FormField & Node {
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"The category type"
type Category implements DatabaseIdentifier & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  "The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): CategoryToAncestorsCategoryConnection
  "The id field matches the WP_Post-&gt;ID field."
  categoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the category type and the category type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: CategoryToCategoryConnectionWhereArgs
  ): CategoryToCategoryConnection
  "Connection between the category type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: CategoryToContentNodeConnectionWhereArgs
  ): CategoryToContentNodeConnection
  "The number of objects connected to the object"
  count: Int
  "The unique resource identifier path"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "List available translations for this post"
  language: Language
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "Connection between the category type and the category type"
  parent: CategoryToParentCategoryConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "Connection between the category type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: CategoryToPostConnectionWhereArgs
  ): CategoryToPostConnection
  "The Yoast SEO data of the Рубрики taxonomy."
  seo: TaxonomySEO
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "Connection between the category type and the Taxonomy type"
  taxonomy: CategoryToTaxonomyConnectionEdge
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Category
  "List all translated versions of this term"
  translations: [Category]
  "The unique resource identifier path"
  uri: String
}

"Connection between the category type and the category type"
type CategoryToAncestorsCategoryConnection {
  "Edges for the CategoryToAncestorsCategoryConnection connection"
  edges: [CategoryToAncestorsCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Category]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type CategoryToAncestorsCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Category
}

"Connection between the category type and the category type"
type CategoryToCategoryConnection {
  "Edges for the CategoryToCategoryConnection connection"
  edges: [CategoryToCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Category]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type CategoryToCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Category
}

"Connection between the category type and the ContentNode type"
type CategoryToContentNodeConnection {
  "Edges for the CategoryToContentNodeConnection connection"
  edges: [CategoryToContentNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type CategoryToContentNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the category type and the category type"
type CategoryToParentCategoryConnectionEdge {
  "The node of the connection, without the edges"
  node: Category
}

"Connection between the category type and the post type"
type CategoryToPostConnection {
  "Edges for the CategoryToPostConnection connection"
  edges: [CategoryToPostConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Post]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type CategoryToPostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post
}

"Connection between the category type and the Taxonomy type"
type CategoryToTaxonomyConnectionEdge {
  "The node of the connection, without the edges"
  node: Taxonomy
}

"Single Checkbox"
type CheckboxField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Checkbox Values"
  checkboxValues: CheckboxFieldCheckboxValues
  "Checked Calculation Value"
  checkedCalcValue: String
  "Custom Class Names"
  classes: CheckboxFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  defaultValue: String
  "Description"
  description: CheckboxFieldDescription
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: CheckboxFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Unchecked Calculation Value"
  uncheckedCalcValue: String
  "Update date"
  updatedAt: Int
}

"Checkbox Values"
type CheckboxFieldCheckboxValues {
  "Checked Value"
  checkedValue: String
  "Unchecked Value"
  uncheckedValue: String
}

"Custom Class Names"
type CheckboxFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type CheckboxFieldDescription {
  descText: String
}

"Help Text"
type CheckboxFieldHelp {
  helpText: String
}

"City"
type CityField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: CityFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Mask"
  customMask: String
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: CityFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: CityFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: CityFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Input Mask"
  mask: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type CityFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type CityFieldDescription {
  descText: String
}

"Help Text"
type CityFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type CityFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"A Comment object"
type Comment implements DatabaseIdentifier & Node {
  "User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL."
  agent: String
  "The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL."
  approved: Boolean
  "The author of the comment"
  author: CommentToCommenterConnectionEdge
  "IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL."
  authorIp: String
  "ID for the comment, unique among comments."
  commentId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the Comment type and the ContentNode type"
  commentedOn: CommentToContentNodeConnectionEdge
  "Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "The unique identifier stored in the database"
  databaseId: Int!
  "Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL."
  date: String
  "Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL."
  dateGmt: String
  "The globally unique identifier for the comment object"
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL."
  karma: Int
  "Connection between the Comment type and the Comment type"
  parent(
    "Arguments for filtering the connection"
    where: CommentToParentCommentConnectionWhereArgs
  ): CommentToParentCommentConnectionEdge
  "The database id of the parent comment node or null if it is the root comment"
  parentDatabaseId: Int
  "The globally unique identifier of the parent comment node."
  parentId: ID
  "Connection between the Comment type and the Comment type"
  replies(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: CommentToCommentConnectionWhereArgs
  ): CommentToCommentConnection
  "Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL."
  type: String
}

"A Comment Author object"
type CommentAuthor implements Commenter & Node {
  "Identifies the primary key from the database."
  databaseId: Int!
  "The email for the comment author"
  email: String
  "The globally unique identifier for the comment author object"
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "The name for the comment author."
  name: String
  "The url the comment author."
  url: String
}

"Connection between the Comment type and the Comment type"
type CommentToCommentConnection {
  "Edges for the CommentToCommentConnection connection"
  edges: [CommentToCommentConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Comment]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type CommentToCommentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment
}

"Connection between the Comment type and the Commenter type"
type CommentToCommenterConnectionEdge {
  "The node of the connection, without the edges"
  node: Commenter
}

"Connection between the Comment type and the ContentNode type"
type CommentToContentNodeConnectionEdge {
  "The node of the connection, without the edges"
  node: ContentNode
}

"Connection between the Comment type and the Comment type"
type CommentToParentCommentConnectionEdge {
  "The node of the connection, without the edges"
  node: Comment
}

"Confirm"
type ConfirmField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ConfirmFieldClasses
  "Confirm"
  confirmField: String
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: ConfirmFieldDescription
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ConfirmFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: ConfirmFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ConfirmFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ConfirmFieldDescription {
  descText: String
}

"Help Text"
type ConfirmFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type ConfirmFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"The ContactItem type"
type ContactItem implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The id field matches the WP_Post-&gt;ID field."
  contactItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: ContactItem_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the contacts_fragment object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the ContactItem type and the ContactItem type"
  preview: ContactItemToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the ContactItem"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the ContactItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: ContactItemToTermNodeConnectionWhereArgs
  ): ContactItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): ContactItem
  "List all translated versions of this post"
  translations: [ContactItem]
  "The unique resource identifier path"
  uri: String
}

"Connection between the ContactItem type and the ContactItem type"
type ContactItemToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: ContactItem
}

"Connection between the ContactItem type and the TermNode type"
type ContactItemToTermNodeConnection {
  "Edges for the ContactItemToTermNodeConnection connection"
  edges: [ContactItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type ContactItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type ContactItem_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"Connection between the ContentNode type and the ContentType type"
type ContentNodeToContentTypeConnectionEdge {
  "The node of the connection, without the edges"
  node: ContentType
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLastConnectionEdge {
  "The node of the connection, without the edges"
  node: User
}

"Connection between the ContentNode type and the User type"
type ContentNodeToEditLockConnectionEdge {
  "The timestamp for when the node was last edited"
  lockTimestamp: String
  "The node of the connection, without the edges"
  node: User
}

"Connection between the ContentNode type and the EnqueuedScript type"
type ContentNodeToEnqueuedScriptConnection {
  "Edges for the ContentNodeToEnqueuedScriptConnection connection"
  edges: [ContentNodeToEnqueuedScriptConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type ContentNodeToEnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript
}

"Connection between the ContentNode type and the EnqueuedStylesheet type"
type ContentNodeToEnqueuedStylesheetConnection {
  "Edges for the ContentNodeToEnqueuedStylesheetConnection connection"
  edges: [ContentNodeToEnqueuedStylesheetConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type ContentNodeToEnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet
}

"An Post Type object"
type ContentType implements Node & UniformResourceIdentifiable {
  "Whether this content type should can be exported."
  canExport: Boolean
  "Connection between the ContentType type and the Taxonomy type"
  connectedTaxonomies(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentTypeToTaxonomyConnection
  "Connection between the ContentType type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: ContentTypeToContentNodeConnectionWhereArgs
  ): ContentTypeToContentNodeConnection
  "Whether content of this type should be deleted when the author of it is deleted from the system."
  deleteWithUser: Boolean
  "Description of the content type."
  description: String
  "Whether to exclude nodes of this content type from front end search results."
  excludeFromSearch: Boolean
  "The plural name of the content type within the GraphQL Schema."
  graphqlPluralName: String
  "The singular name of the content type within the GraphQL Schema."
  graphqlSingleName: String
  "Whether this content type should have archives. Content archives are generated by type and by date."
  hasArchive: Boolean
  "Whether the content type is hierarchical, for example pages."
  hierarchical: Boolean
  "The globally unique identifier of the post-type object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether this page is set to the static front page."
  isFrontPage: Boolean!
  "Whether this page is set to the blog posts page."
  isPostsPage: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Display name of the content type."
  label: String
  "Details about the content type labels."
  labels: PostTypeLabelDetails
  "The name of the icon file to display as a menu icon."
  menuIcon: String
  "The position of this post type in the menu. Only applies if show_in_menu is true."
  menuPosition: Int
  "The internal name of the post type. This should not be used for display purposes."
  name: String
  "Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention."
  public: Boolean
  "Whether queries can be performed on the front end for the content type as part of parse_request()."
  publiclyQueryable: Boolean
  "Name of content type to display in REST API &quot;wp/v2&quot; namespace."
  restBase: String
  "The REST Controller class assigned to handling this content type."
  restControllerClass: String
  "Makes this content type available via the admin bar."
  showInAdminBar: Boolean
  "Whether to add the content type to the GraphQL Schema."
  showInGraphql: Boolean
  "Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that."
  showInMenu: Boolean
  "Makes this content type available for selection in navigation menus."
  showInNavMenus: Boolean
  "Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace."
  showInRest: Boolean
  "Whether to generate and allow a UI for managing this content type in the admin."
  showUi: Boolean
  "The unique resource identifier path"
  uri: String
}

"Connection between the ContentType type and the ContentNode type"
type ContentTypeToContentNodeConnection {
  "Edges for the ContentTypeToContentNodeConnection connection"
  edges: [ContentTypeToContentNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type ContentTypeToContentNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the ContentType type and the Taxonomy type"
type ContentTypeToTaxonomyConnection {
  "Edges for the ContentTypeToTaxonomyConnection connection"
  edges: [ContentTypeToTaxonomyConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Taxonomy]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type ContentTypeToTaxonomyConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Taxonomy
}

"The payload for the createAboutItem mutation"
type CreateAboutItemPayload {
  "The Post object mutation type."
  aboutItem: AboutItem
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
}

"The payload for the createCategory mutation"
type CreateCategoryPayload {
  "The created category"
  category: Category
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
}

"The payload for the createComment mutation"
type CreateCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment that was created"
  comment: Comment
  "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
  success: Boolean
}

"The payload for the createContactItem mutation"
type CreateContactItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  contactItem: ContactItem
}

"The payload for the createFeedbackItem mutation"
type CreateFeedbackItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  feedbackItem: FeedbackItem
}

"The payload for the createFooterItem mutation"
type CreateFooterItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  footerItem: FooterItem
}

"The payload for the createFragment mutation"
type CreateFragmentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  fragment: Fragment
}

"The payload for the createHeroItem mutation"
type CreateHeroItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  heroItem: HeroItem
}

"The payload for the createMediaItem mutation"
type CreateMediaItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The MediaItem object mutation type."
  mediaItem: MediaItem
}

"The payload for the createMessenger mutation"
type CreateMessengerPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  messenger: Messenger
}

"The payload for the createNavigationItem mutation"
type CreateNavigationItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  navigationItem: NavigationItem
}

"The payload for the createPage mutation"
type CreatePagePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  page: Page
}

"The payload for the createPostFormat mutation"
type CreatePostFormatPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_format"
  postFormat: PostFormat
}

"The payload for the createPost mutation"
type CreatePostPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  post: Post
}

"The payload for the createPrivacyPolicyItem mutation"
type CreatePrivacyPolicyItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  privacyPolicyItem: PrivacyPolicyItem
}

"The payload for the createRecruit mutation"
type CreateRecruitPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  recruit: Recruit
}

"The payload for the createReview mutation"
type CreateReviewPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  review: Review
}

"The payload for the createSkillCategory mutation"
type CreateSkillCategoryPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created skill_list"
  skillCategory: SkillCategory
}

"The payload for the createSkill mutation"
type CreateSkillPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  skill: Skill
}

"The payload for the createSocialNetwork mutation"
type CreateSocialNetworkPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  socialNetwork: SocialNetwork
}

"The payload for the createTag mutation"
type CreateTagPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_tag"
  tag: Tag
}

"The payload for the createUser mutation"
type CreateUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"Date/Time"
type DateField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: DateFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default To Current Date"
  dateDefault: Boolean
  "Format"
  dateFormat: String
  "Date/Time Mode"
  dateMode: String
  "Description"
  description: DateFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: DateFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "Time Settings"
  timeSettings: DateFieldTimeSettings
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
  "Year Range"
  yearRange: DateFieldYearRange
}

"Custom Class Names"
type DateFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type DateFieldDescription {
  descText: String
}

"Help Text"
type DateFieldHelp {
  helpText: String
}

"Time Settings"
type DateFieldTimeSettings {
  "24 Hour Input"
  hours24: Boolean
  "Minute Increment"
  minuteIncrement: Int
}

"Year Range"
type DateFieldYearRange {
  "End Year"
  yearRangeEnd: Int
  "Start Year"
  yearRangeStart: Int
}

"The template assigned to the node"
type DefaultTemplate implements ContentTemplate {
  "The name of the template"
  templateName: String
}

"The payload for the deleteAboutItem mutation"
type DeleteAboutItemPayload {
  "The object before it was deleted"
  aboutItem: AboutItem
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
}

"The payload for the deleteCategory mutation"
type DeleteCategoryPayload {
  "The deteted term object"
  category: Category
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
}

"The payload for the deleteComment mutation"
type DeleteCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The deleted comment object"
  comment: Comment
  "The deleted comment ID"
  deletedId: ID
}

"The payload for the deleteContactItem mutation"
type DeleteContactItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The object before it was deleted"
  contactItem: ContactItem
  "The ID of the deleted object"
  deletedId: ID
}

"The payload for the deleteFeedbackItem mutation"
type DeleteFeedbackItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  feedbackItem: FeedbackItem
}

"The payload for the deleteFooterItem mutation"
type DeleteFooterItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  footerItem: FooterItem
}

"The payload for the deleteFragment mutation"
type DeleteFragmentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  fragment: Fragment
}

"The payload for the deleteHeroItem mutation"
type DeleteHeroItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  heroItem: HeroItem
}

"The payload for the deleteMediaItem mutation"
type DeleteMediaItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted mediaItem"
  deletedId: ID
  "The mediaItem before it was deleted"
  mediaItem: MediaItem
}

"The payload for the deleteMessenger mutation"
type DeleteMessengerPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  messenger: Messenger
}

"The payload for the deleteNavigationItem mutation"
type DeleteNavigationItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  navigationItem: NavigationItem
}

"The payload for the deletePage mutation"
type DeletePagePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  page: Page
}

"The payload for the deletePostFormat mutation"
type DeletePostFormatPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The deteted term object"
  postFormat: PostFormat
}

"The payload for the deletePost mutation"
type DeletePostPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  post: Post
}

"The payload for the deletePrivacyPolicyItem mutation"
type DeletePrivacyPolicyItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  privacyPolicyItem: PrivacyPolicyItem
}

"The payload for the deleteRecruit mutation"
type DeleteRecruitPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  recruit: Recruit
}

"The payload for the deleteReview mutation"
type DeleteReviewPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  review: Review
}

"The payload for the deleteSkillCategory mutation"
type DeleteSkillCategoryPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The deteted term object"
  skillCategory: SkillCategory
}

"The payload for the deleteSkill mutation"
type DeleteSkillPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  skill: Skill
}

"The payload for the deleteSocialNetwork mutation"
type DeleteSocialNetworkPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The object before it was deleted"
  socialNetwork: SocialNetwork
}

"The payload for the deleteTag mutation"
type DeleteTagPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the deleted object"
  deletedId: ID
  "The deteted term object"
  tag: Tag
}

"The payload for the deleteUser mutation"
type DeleteUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the user that you just deleted"
  deletedId: ID
  "The deleted user object"
  user: User
}

"The discussion setting type"
type DiscussionSettings {
  "Разрешить оставлять комментарии к новым записям."
  defaultCommentStatus: String
  "Разрешить ссылки оповещения с других блогов (уведомления и обратные ссылки) на новые статьи."
  defaultPingStatus: String
}

"Email"
type EmailField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: EmailFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: EmailFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: EmailFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type EmailFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type EmailFieldDescription {
  descText: String
}

"Help Text"
type EmailFieldHelp {
  helpText: String
}

"Script enqueued by the CMS"
type EnqueuedScript implements EnqueuedAsset & Node {
  "@todo"
  args: Boolean
  "Dependencies needed to use this asset"
  dependencies: [EnqueuedScript]
  "Extra information needed for the script"
  extra: String
  "The handle of the enqueued asset"
  handle: String
  "The ID of the enqueued asset"
  id: ID!
  "The source of the asset"
  src: String
  "The version of the enqueued asset"
  version: String
}

"Stylesheet enqueued by the CMS"
type EnqueuedStylesheet implements EnqueuedAsset & Node {
  "@todo"
  args: Boolean
  "Dependencies needed to use this asset"
  dependencies: [EnqueuedScript]
  "Extra information needed for the script"
  extra: String
  "The handle of the enqueued asset"
  handle: String
  "The ID of the enqueued asset"
  id: ID!
  "The source of the asset"
  src: String
  "The version of the enqueued asset"
  version: String
}

"The FeedbackItem type"
type FeedbackItem implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: FeedbackItem_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The id field matches the WP_Post-&gt;ID field."
  feedbackItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the feedback object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the FeedbackItem type and the FeedbackItem type"
  preview: FeedbackItemToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the FeedbackItem"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the FeedbackItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: FeedbackItemToTermNodeConnectionWhereArgs
  ): FeedbackItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): FeedbackItem
  "List all translated versions of this post"
  translations: [FeedbackItem]
  "The unique resource identifier path"
  uri: String
}

"Connection between the FeedbackItem type and the FeedbackItem type"
type FeedbackItemToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: FeedbackItem
}

"Connection between the FeedbackItem type and the TermNode type"
type FeedbackItemToTermNodeConnection {
  "Edges for the FeedbackItemToTermNodeConnection connection"
  edges: [FeedbackItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type FeedbackItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type FeedbackItem_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"Type of ID being used identify the form"
type FieldError {
  "Field Id"
  fieldId: Int!
  "Localized error message"
  message: String
  "Slug error identifier"
  slug: String
}

"The Id of the field"
type FieldOption {
  "The Id of the field"
  calc: String
  "The Id of the field"
  label: String
  "The Id of the field"
  order: Int
  "The Id of the field"
  selected: Boolean
  "The Id of the field"
  value: String
}

"First Name"
type FirstnameField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: FirstnameFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: FirstnameFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: FirstnameFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type FirstnameFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type FirstnameFieldDescription {
  descText: String
}

"Help Text"
type FirstnameFieldHelp {
  helpText: String
}

"The FooterItem type"
type FooterItem implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: FooterItem_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The id field matches the WP_Post-&gt;ID field."
  footerItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the footer_fragments object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the FooterItem type and the FooterItem type"
  preview: FooterItemToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the FooterItem"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the FooterItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: FooterItemToTermNodeConnectionWhereArgs
  ): FooterItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): FooterItem
  "List all translated versions of this post"
  translations: [FooterItem]
  "The unique resource identifier path"
  uri: String
}

"Connection between the FooterItem type and the FooterItem type"
type FooterItemToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: FooterItem
}

"Connection between the FooterItem type and the TermNode type"
type FooterItemToTermNodeConnection {
  "Edges for the FooterItemToTermNodeConnection connection"
  edges: [FooterItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type FooterItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type FooterItem_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"The form object"
type Form implements DatabaseIdentifier & Node {
  "Добавить кнопку «Отправить»"
  addSubmit: Boolean
  "Allow a public link?"
  allowPublicLink: Boolean
  "Пользовательские имена классов"
  classes: FormClasses
  "Очистить успешно заполненную форму?"
  clearComplete: Boolean
  "Валюта"
  currency: String
  "Custom Labels"
  customMessages: FormCustomMessages
  "The Id of the form"
  databaseId: Int!
  "Позиция метки по умолчанию"
  defaultLabelPos: String
  "Embed Your Form"
  embedForm: String
  "Connection between the Form type and the FormField type"
  fields(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): FormToFormFieldConnection
  "The Id of the form"
  formId: Int
  "Скрыть успешно заполненную форму?"
  hideComplete: Boolean
  "The globally unique identifier of the form"
  id: ID!
  "Ключ формы"
  key: String
  "Ограничение заявок"
  limitSubmissionsSet: FormLimitSubmissionsSet
  "Зарегистрированы"
  loggedInSet: FormLoggedInSet
  "Link To Your Form"
  publicLink: String
  "Repeatable fieldsets"
  repeatableFieldsets: String
  "The Locale of the form"
  seqNum: Int
  "Отобразить название формы"
  showTitle: Boolean
  "Название формы"
  title: String
  "Unique Field"
  uniqueFieldSet: FormUniqueFieldSet
}

"Пользовательские имена классов"
type FormClasses {
  "Элемент"
  elementClass: String
  "Оболочка"
  wrapperClass: String
}

"Custom Labels"
type FormCustomMessages {
  "Please enter a valid date!"
  changeDateErrorMsg: String
  "Укажите действительный адрес электронной почты!"
  changeEmailErrorMsg: String
  "Содержание этих полей должно совпадать!"
  confirmFieldErrorMsg: String
  "Увеличивайте с шагом "
  fieldNumberIncrementBy: String
  "Макс. номер ошибки"
  fieldNumberNumMaxError: String
  "Мин. номер ошибки"
  fieldNumberNumMinError: String
  "Поля, помеченные символом &lt;span class=&quot;ninja-forms-req-symbol&quot;&gt;*&lt;/span&gt;, обязательны к заполнению"
  fieldsMarkedRequired: String
  "Исправьте ошибки перед отправкой этой формы."
  formErrorsCorrectErrors: String
  "Ошибка Honeypot"
  honeypotHoneypotError: String
  "Это обязательное поле."
  validateRequiredField: String
}

"Ограничение заявок"
type FormLimitSubmissionsSet {
  "Сообщение о достижении предела"
  subLimitMsg: String
  "Ограничение кол-ва отправок формы"
  subLimitNumber: Int
}

"Зарегистрированы"
type FormLoggedInSet {
  "Должен ли пользователь авторизоваться для просмотра формы?"
  loggedIn: Boolean
  "Сообщение о необходимости авторизации"
  notLoggedInMsg: String
}

"Connection between the Form type and the FormField type"
type FormToFormFieldConnection {
  "Edges for the FormToFormFieldConnection connection"
  edges: [FormToFormFieldConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [FormField]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type FormToFormFieldConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: FormField
}

"Unique Field"
type FormUniqueFieldSet {
  "unique_field"
  uniqueField: String
  "Unique Field Error Message"
  uniqueFieldError: String
}

"The Fragment type"
type Fragment implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The excerpt of the post."
  excerpt("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The id field matches the WP_Post-&gt;ID field."
  fragmentId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Added to the GraphQL Schema because the ACF Field Group &quot;Фрагменты&quot; was set to Show in GraphQL."
  fragments: Fragment_Fragments
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the fragment object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the Fragment type and the Fragment type"
  preview: FragmentToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the Fragment"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the Fragment type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: FragmentToTermNodeConnectionWhereArgs
  ): FragmentToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Fragment
  "List all translated versions of this post"
  translations: [Fragment]
  "The unique resource identifier path"
  uri: String
}

"Connection between the Fragment type and the Fragment type"
type FragmentToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: Fragment
}

"Connection between the Fragment type and the TermNode type"
type FragmentToTermNodeConnection {
  "Edges for the FragmentToTermNodeConnection connection"
  edges: [FragmentToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type FragmentToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type Fragment_Fragments implements AcfFieldGroup {
  "The name of the ACF Field Group"
  fieldGroupName: String
  reverse: Boolean
}

"The general setting type"
type GeneralSettings {
  "Общий формат даты."
  dateFormat: String
  "Слоган сайта."
  description: String
  "Этот адрес используется в целях администрирования. Например, для уведомления о новых пользователях."
  email: String
  "Код локали WordPress."
  language: String
  "Первый день недели."
  startOfWeek: Int
  "Общий формат времени."
  timeFormat: String
  "Город в той же временной зоне что и у вас."
  timezone: String
  "Название сайта."
  title: String
  "Адрес сайта (URL)"
  url: String
}

"The HeroItem type"
type HeroItem implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: HeroItem_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The id field matches the WP_Post-&gt;ID field."
  heroItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The globally unique identifier of the hero_fragments object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the HeroItem type and the HeroItem type"
  preview: HeroItemToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the HeroItem"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the HeroItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HeroItemToTermNodeConnectionWhereArgs
  ): HeroItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): HeroItem
  "List all translated versions of this post"
  translations: [HeroItem]
  "The unique resource identifier path"
  uri: String
}

"Connection between the HeroItem type and the HeroItem type"
type HeroItemToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: HeroItem
}

"Connection between the HeroItem type and the TermNode type"
type HeroItemToTermNodeConnection {
  "Edges for the HeroItemToTermNodeConnection connection"
  edges: [HeroItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type HeroItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type HeroItem_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"Hidden"
type HiddenField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeAncestorsConnection {
  "Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
  edges: [HierarchicalContentNodeToContentNodeAncestorsConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeAncestorsConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToContentNodeChildrenConnection {
  "Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection"
  edges: [HierarchicalContentNodeToContentNodeChildrenConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type HierarchicalContentNodeToContentNodeChildrenConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the HierarchicalContentNode type and the ContentNode type"
type HierarchicalContentNodeToParentContentNodeConnectionEdge {
  "The node of the connection, without the edges"
  node: ContentNode
}

"Divider"
type HrField implements DatabaseIdentifier & FormField & Node {
  "Custom Class Names"
  classes: HrFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label of the field"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type HrFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"HTML"
type HtmlField implements DatabaseIdentifier & FormField & Node {
  "Custom Class Names"
  classes: HtmlFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type HtmlFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Language (Polylang)"
type Language {
  "Language code (Polylang)"
  code: LanguageCodeEnum
  "Language ID (Polylang)"
  id: ID!
  "Language locale (Polylang)"
  locale: String
  "Human readable language name (Polylang)"
  name: String
  "Language term slug. Prefer the &quot;code&quot; field if possible (Polylang)"
  slug: String
}

"Last Name"
type LastnameField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: LastnameFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: LastnameFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: LastnameFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type LastnameFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type LastnameFieldDescription {
  descText: String
}

"Help Text"
type LastnameFieldHelp {
  helpText: String
}

"Checkbox List"
type ListcheckboxField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ListcheckboxFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: ListcheckboxFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ListcheckboxFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "options"
  options: [FieldOption]
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ListcheckboxFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ListcheckboxFieldDescription {
  descText: String
}

"Help Text"
type ListcheckboxFieldHelp {
  helpText: String
}

"Country"
type ListcountryField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ListcountryFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: ListcountryFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ListcountryFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "options"
  options: [FieldOption]
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ListcountryFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ListcountryFieldDescription {
  descText: String
}

"Help Text"
type ListcountryFieldHelp {
  helpText: String
}

"Select Image"
type ListimageField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Allow Multiple Selections"
  allowMultiSelect: Boolean
  "Custom Class Names"
  classes: ListimageFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: ListimageFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ListimageFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Image Options &lt;a href=&quot;#&quot; class=&quot;nf-add-new&quot;&gt;Add New&lt;/a&gt;"
  imageOptions: String
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "List Orientation"
  listOrientation: String
  "Number of Columns"
  numColumns: Int
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "Show Labels"
  showOptionLabels: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ListimageFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ListimageFieldDescription {
  descText: String
}

"Help Text"
type ListimageFieldHelp {
  helpText: String
}

"Multi-Select"
type ListmultiselectField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ListmultiselectFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: ListmultiselectFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ListmultiselectFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "Multi-Select Box Size"
  multiSize: Int
  "options"
  options: [FieldOption]
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ListmultiselectFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ListmultiselectFieldDescription {
  descText: String
}

"Help Text"
type ListmultiselectFieldHelp {
  helpText: String
}

"Radio List"
type ListradioField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ListradioFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: ListradioFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ListradioFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "options"
  options: [FieldOption]
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ListradioFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ListradioFieldDescription {
  descText: String
}

"Help Text"
type ListradioFieldHelp {
  helpText: String
}

"Select"
type ListselectField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ListselectFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: ListselectFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ListselectFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "options"
  options: [FieldOption]
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ListselectFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ListselectFieldDescription {
  descText: String
}

"Help Text"
type ListselectFieldHelp {
  helpText: String
}

"US States"
type ListstateField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ListstateFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: ListstateFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ListstateFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "options"
  options: [FieldOption]
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ListstateFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ListstateFieldDescription {
  descText: String
}

"Help Text"
type ListstateFieldHelp {
  helpText: String
}

"File details for a Media Item"
type MediaDetails {
  "The filename of the mediaItem"
  file: String
  "The height of the mediaItem"
  height: Int
  "Meta information associated with the mediaItem"
  meta: MediaItemMeta
  "The available sizes of the mediaItem"
  sizes: [MediaSize]
  "The width of the mediaItem"
  width: Int
}

"The mediaItem type"
type MediaItem implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & Node & NodeWithAuthor & NodeWithComments & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "Alternative text to display when resource is not displayed"
  altText: String
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
  "The caption for the resource"
  caption("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
  "Connection between the mediaItem type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: MediaItemToCommentConnectionWhereArgs
  ): MediaItemToCommentConnection
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique identifier stored in the database"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "Description of the image (stored as post_content)"
  description("Format of the field output" format: PostObjectFieldFormatEnum): String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The filesize in bytes of the resource"
  fileSize("Size of the MediaItem to return" size: MediaItemSizeEnum): Int
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the attachment object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "Details about the mediaItem"
  mediaDetails: MediaDetails
  "The id field matches the WP_Post-&gt;ID field."
  mediaItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Url of the mediaItem"
  mediaItemUrl: String
  "Type of resource"
  mediaType: String
  "The mime type of the mediaItem"
  mimeType: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the mediaItem"
  seo: PostTypeSEO
  "The sizes attribute value for an image."
  sizes("Size of the MediaItem to calculate sizes with" size: MediaItemSizeEnum): String
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "Url of the mediaItem"
  sourceUrl("Size of the MediaItem to return" size: MediaItemSizeEnum): String
  "The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths."
  srcSet("Size of the MediaItem to calculate srcSet with" size: MediaItemSizeEnum): String
  "The current status of the object"
  status: String
  "The template assigned to the node"
  template: ContentTemplate
  "Connection between the mediaItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: MediaItemToTermNodeConnectionWhereArgs
  ): MediaItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): MediaItem
  "List all translated versions of this post"
  translations: [MediaItem]
  "The unique resource identifier path"
  uri: String
}

"Meta connected to a MediaItem"
type MediaItemMeta {
  "Aperture measurement of the media item."
  aperture: Float
  "Information about the camera used to create the media item."
  camera: String
  "The text string description associated with the media item."
  caption: String
  "Copyright information associated with the media item."
  copyright: String
  "The date/time when the media was created."
  createdTimestamp: Int
  "The original creator of the media item."
  credit: String
  "The focal length value of the media item."
  focalLength: Float
  "The ISO (International Organization for Standardization) value of the media item."
  iso: Int
  "List of keywords used to describe or identfy the media item."
  keywords: [String]
  "The vertical or horizontal aspect of the media item."
  orientation: String
  "The shutter speed information of the media item."
  shutterSpeed: Float
  "A useful title for the media item."
  title: String
}

"Connection between the mediaItem type and the Comment type"
type MediaItemToCommentConnection {
  "Edges for the MediaItemToCommentConnection connection"
  edges: [MediaItemToCommentConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Comment]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type MediaItemToCommentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment
}

"Connection between the mediaItem type and the TermNode type"
type MediaItemToTermNodeConnection {
  "Edges for the MediaItemToTermNodeConnection connection"
  edges: [MediaItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type MediaItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Details of an available size for a media item"
type MediaSize {
  "The filename of the referenced size"
  file: String
  "The filesize of the resource"
  fileSize: Int
  "The height of the referenced size"
  height: String
  "The mime type of the referenced size"
  mimeType: String
  "The referenced size name"
  name: String
  "The url of the referenced size"
  sourceUrl: String
  "The width of the referenced size"
  width: String
}

"Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme."
type Menu implements DatabaseIdentifier & Node {
  "The number of items in the menu"
  count: Int
  "The unique identifier stored in the database"
  databaseId: Int!
  "The globally unique identifier of the nav menu object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "The locations a menu is assigned to"
  locations: [MenuLocationEnum]
  "WP ID of the nav menu."
  menuId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Connection between the Menu type and the MenuItem type"
  menuItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: MenuToMenuItemConnectionWhereArgs
  ): MenuToMenuItemConnection
  "Display name of the menu. Equivalent to WP_Term-&gt;name."
  name: String
  "The url friendly name of the menu. Equivalent to WP_Term-&gt;slug"
  slug: String
}

"Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu."
type MenuItem implements DatabaseIdentifier & Node {
  "Connection between the MenuItem type and the MenuItem type"
  childItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: MenuItemToMenuItemConnectionWhereArgs
  ): MenuItemToMenuItemConnection
  "Connection from MenuItem to it&#039;s connected node"
  connectedNode: MenuItemToMenuItemLinkableConnectionEdge
  "The object connected to this menu item."
  connectedObject: MenuItemObjectUnion
    @deprecated(reason: "Deprecated in favor of the connectedNode field")
  "Class attribute for the menu item link"
  cssClasses: [String]
  "The unique identifier stored in the database"
  databaseId: Int!
  "Description of the menu item."
  description: String
  "The globally unique identifier of the nav menu item object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Label or title of the menu item."
  label: String
  "Link relationship (XFN) of the menu item."
  linkRelationship: String
  "The locations the menu item&#039;s Menu is assigned to"
  locations: [MenuLocationEnum]
  "The Menu a MenuItem is part of"
  menu: MenuItemToMenuConnectionEdge
  "WP ID of the menu item."
  menuItemId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Menu item order"
  order: Int
  "The database id of the parent menu item or null if it is the root"
  parentDatabaseId: Int
  "The globally unique identifier of the parent nav menu item object."
  parentId: ID
  "Path for the resource. Relative path for internal resources. Absolute path for external resources."
  path: String
  "Target attribute for the menu item link."
  target: String
  "Title attribute for the menu item link"
  title: String
  "URL or destination of the menu item."
  url: String
}

"Connection between the MenuItem type and the Menu type"
type MenuItemToMenuConnectionEdge {
  "The node of the connection, without the edges"
  node: Menu
}

"Connection between the MenuItem type and the MenuItem type"
type MenuItemToMenuItemConnection {
  "Edges for the MenuItemToMenuItemConnection connection"
  edges: [MenuItemToMenuItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [MenuItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type MenuItemToMenuItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MenuItem
}

"Connection between the MenuItem type and the MenuItemLinkable type"
type MenuItemToMenuItemLinkableConnectionEdge {
  "The node of the connection, without the edges"
  node: MenuItemLinkable
}

"Connection between the Menu type and the MenuItem type"
type MenuToMenuItemConnection {
  "Edges for the MenuToMenuItemConnection connection"
  edges: [MenuToMenuItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [MenuItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type MenuToMenuItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MenuItem
}

"The Messenger type"
type Messenger implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the messengers object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The id field matches the WP_Post-&gt;ID field."
  messengerId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the Messenger type and the Messenger type"
  preview: MessengerToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the Messenger"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "The unique resource identifier path"
  uri: String
}

"Connection between the Messenger type and the Messenger type"
type MessengerToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: Messenger
}

"The NavigationItem type"
type NavigationItem implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: NavigationItem_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the navigation object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The id field matches the WP_Post-&gt;ID field."
  navigationItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Connection between the NavigationItem type and the NavigationItem type"
  preview: NavigationItemToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the NavigationItem"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the NavigationItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: NavigationItemToTermNodeConnectionWhereArgs
  ): NavigationItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): NavigationItem
  "List all translated versions of this post"
  translations: [NavigationItem]
  "The unique resource identifier path"
  uri: String
}

"Connection between the NavigationItem type and the NavigationItem type"
type NavigationItemToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: NavigationItem
}

"Connection between the NavigationItem type and the TermNode type"
type NavigationItemToTermNodeConnection {
  "Edges for the NavigationItemToTermNodeConnection connection"
  edges: [NavigationItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type NavigationItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type NavigationItem_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"Connection between the NodeWithAuthor type and the User type"
type NodeWithAuthorToUserConnectionEdge {
  "The node of the connection, without the edges"
  node: User
}

"Connection between the NodeWithFeaturedImage type and the MediaItem type"
type NodeWithFeaturedImageToMediaItemConnectionEdge {
  "The node of the connection, without the edges"
  node: MediaItem
}

"Connection between the NodeWithRevisions type and the ContentNode type"
type NodeWithRevisionsToContentNodeConnectionEdge {
  "The node of the connection, without the edges"
  node: ContentNode
}

"Note"
type NoteField implements DatabaseIdentifier & FormField & Node {
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
  "HTML"
  valueMirror: String
}

"Number"
type NumberField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: NumberFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: NumberFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: NumberFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Number Options"
  number: NumberFieldNumber
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type NumberFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type NumberFieldDescription {
  descText: String
}

"Help Text"
type NumberFieldHelp {
  helpText: String
}

"Number Options"
type NumberFieldNumber {
  "Max"
  numMax: Int
  "Min"
  numMin: Int
  "Step"
  numStep: String
}

"The page type"
type Page implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
  "Connection between the page type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PageToCommentConnectionWhereArgs
  ): PageToCommentConnection
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the page object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether this page is set to the static front page."
  isFrontPage: Boolean!
  "Whether this page is set to the blog posts page."
  isPostsPage: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether this page is set to the privacy page."
  isPrivacyPage: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "True if the node is a revision of another node"
  isRevision: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The id field matches the WP_Post-&gt;ID field."
  pageId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "Connection between the page type and the page type"
  preview: PageToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  "Connection between the page type and the page type"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PageToRevisionConnectionWhereArgs
  ): PageToRevisionConnection
  "The Yoast SEO data of the page"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the page type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PageToTermNodeConnectionWhereArgs
  ): PageToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Page
  "List all translated versions of this post"
  translations: [Page]
  "The unique resource identifier path"
  uri: String
}

"Connection between the page type and the Comment type"
type PageToCommentConnection {
  "Edges for the PageToCommentConnection connection"
  edges: [PageToCommentConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Comment]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PageToCommentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment
}

"Connection between the page type and the page type"
type PageToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: Page
}

"Connection between the page type and the page type"
type PageToRevisionConnection {
  "Edges for the pageToRevisionConnection connection"
  edges: [PageToRevisionConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Page]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PageToRevisionConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Page
}

"Connection between the page type and the TermNode type"
type PageToTermNodeConnection {
  "Edges for the PageToTermNodeConnection connection"
  edges: [PageToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PageToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Password"
type PasswordField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: PasswordFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: PasswordFieldDescription
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: PasswordFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: PasswordFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type PasswordFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type PasswordFieldDescription {
  descText: String
}

"Help Text"
type PasswordFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type PasswordFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"Password Confirm"
type PasswordconfirmField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: PasswordconfirmFieldClasses
  "Confirm"
  confirmField: String
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: PasswordconfirmFieldDescription
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: PasswordconfirmFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: PasswordconfirmFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type PasswordconfirmFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type PasswordconfirmFieldDescription {
  descText: String
}

"Help Text"
type PasswordconfirmFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type PasswordconfirmFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"Phone"
type PhoneField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: PhoneFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Mask"
  customMask: String
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: PhoneFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: PhoneFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: PhoneFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Input Mask"
  mask: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type PhoneFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type PhoneFieldDescription {
  descText: String
}

"Help Text"
type PhoneFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type PhoneFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"An plugin object"
type Plugin implements Node {
  "Name of the plugin author(s), may also be a company name."
  author: String
  "URI for the related author(s)/company website."
  authorUri: String
  "Description of the plugin."
  description: String
  "The globally unique identifier of the plugin object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Display name of the plugin."
  name: String
  "Plugin path."
  path: String
  "URI for the plugin website. This is useful for directing users for support requests etc."
  pluginUri: String
  "Current version of the plugin."
  version: String
}

"The post type"
type Post implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithAuthor & NodeWithComments & NodeWithContentEditor & NodeWithExcerpt & NodeWithFeaturedImage & NodeWithRevisions & NodeWithTemplate & NodeWithTitle & NodeWithTrackbacks & UniformResourceIdentifiable {
  "Connection between the NodeWithAuthor type and the User type"
  author: NodeWithAuthorToUserConnectionEdge
  "The database identifier of the author of the node"
  authorDatabaseId: Int
  "The globally unique identifier of the author of the node"
  authorId: ID
  "Connection between the post type and the category type"
  categories(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostToCategoryConnectionWhereArgs
  ): PostToCategoryConnection
  "The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility."
  commentCount: Int
  "Whether the comments are open or closed for this particular post."
  commentStatus: String
  "Connection between the post type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostToCommentConnectionWhereArgs
  ): PostToCommentConnection
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "The excerpt of the post."
  excerpt("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the post object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "True if the node is a revision of another node"
  isRevision: Boolean
  "Whether this page is sticky"
  isSticky: Boolean!
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Whether the pings are open or closed for this particular post."
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "Connection between the post type and the postFormat type"
  postFormats(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostToPostFormatConnectionWhereArgs
  ): PostToPostFormatConnection
  "The id field matches the WP_Post-&gt;ID field."
  postId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Connection between the post type and the post type"
  preview: PostToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node."
  revisionOf: NodeWithRevisionsToContentNodeConnectionEdge
  "Connection between the post type and the post type"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostToRevisionConnectionWhereArgs
  ): PostToRevisionConnection
  "The Yoast SEO data of the post"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "Connection between the post type and the tag type"
  tags(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostToTagConnectionWhereArgs
  ): PostToTagConnection
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the post type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostToTermNodeConnectionWhereArgs
  ): PostToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "URLs queued to be pinged."
  toPing: [String]
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Post
  "List all translated versions of this post"
  translations: [Post]
  "The unique resource identifier path"
  uri: String
}

"The postFormat type"
type PostFormat implements DatabaseIdentifier & Node & TermNode & UniformResourceIdentifiable {
  "Connection between the postFormat type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostFormatToContentNodeConnectionWhereArgs
  ): PostFormatToContentNodeConnection
  "The number of objects connected to the object"
  count: Int
  "The unique identifier stored in the database"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "The id field matches the WP_Post-&gt;ID field."
  postFormatId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the postFormat type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostFormatToPostConnectionWhereArgs
  ): PostFormatToPostConnection
  "Connection between the postFormat type and the Review type"
  reviews(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostFormatToReviewConnectionWhereArgs
  ): PostFormatToReviewConnection
  "The Yoast SEO data of the Форматы taxonomy."
  seo: TaxonomySEO
  "Connection between the postFormat type and the Skill type"
  skills(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PostFormatToSkillConnectionWhereArgs
  ): PostFormatToSkillConnection
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "Connection between the postFormat type and the Taxonomy type"
  taxonomy: PostFormatToTaxonomyConnectionEdge
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "The unique resource identifier path"
  uri: String
}

"Connection between the postFormat type and the ContentNode type"
type PostFormatToContentNodeConnection {
  "Edges for the PostFormatToContentNodeConnection connection"
  edges: [PostFormatToContentNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostFormatToContentNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the postFormat type and the post type"
type PostFormatToPostConnection {
  "Edges for the PostFormatToPostConnection connection"
  edges: [PostFormatToPostConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Post]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostFormatToPostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post
}

"Connection between the postFormat type and the Review type"
type PostFormatToReviewConnection {
  "Edges for the PostFormatToReviewConnection connection"
  edges: [PostFormatToReviewConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Review]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostFormatToReviewConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Review
}

"Connection between the postFormat type and the Skill type"
type PostFormatToSkillConnection {
  "Edges for the PostFormatToSkillConnection connection"
  edges: [PostFormatToSkillConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Skill]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostFormatToSkillConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Skill
}

"Connection between the postFormat type and the Taxonomy type"
type PostFormatToTaxonomyConnectionEdge {
  "The node of the connection, without the edges"
  node: Taxonomy
}

"Connection between the post type and the category type"
type PostToCategoryConnection {
  "Edges for the PostToCategoryConnection connection"
  edges: [PostToCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Category]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostToCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary category"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: Category
}

"Connection between the post type and the Comment type"
type PostToCommentConnection {
  "Edges for the PostToCommentConnection connection"
  edges: [PostToCommentConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Comment]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostToCommentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment
}

"Connection between the post type and the postFormat type"
type PostToPostFormatConnection {
  "Edges for the PostToPostFormatConnection connection"
  edges: [PostToPostFormatConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [PostFormat]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostToPostFormatConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary post_format"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: PostFormat
}

"Connection between the post type and the post type"
type PostToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: Post
}

"Connection between the post type and the post type"
type PostToRevisionConnection {
  "Edges for the postToRevisionConnection connection"
  edges: [PostToRevisionConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Post]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostToRevisionConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post
}

"Connection between the post type and the tag type"
type PostToTagConnection {
  "Edges for the PostToTagConnection connection"
  edges: [PostToTagConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Tag]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostToTagConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary post_tag"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: Tag
}

"Connection between the post type and the TermNode type"
type PostToTermNodeConnection {
  "Edges for the PostToTermNodeConnection connection"
  edges: [PostToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PostToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Details for labels of the PostType"
type PostTypeLabelDetails {
  "Default is ‘Add New’ for both hierarchical and non-hierarchical types."
  addNew: String
  "Label for adding a new singular item."
  addNewItem: String
  "Label to signify all items in a submenu link."
  allItems: String
  "Label for archives in nav menus"
  archives: String
  "Label for the attributes meta box."
  attributes: String
  "Label for editing a singular item."
  editItem: String
  "Label for the Featured Image meta box title."
  featuredImage: String
  "Label for the table views hidden heading."
  filterItemsList: String
  "Label for the media frame button."
  insertIntoItem: String
  "Label for the table hidden heading."
  itemsList: String
  "Label for the table pagination hidden heading."
  itemsListNavigation: String
  "Label for the menu name."
  menuName: String
  "General name for the post type, usually plural."
  name: String
  "Label for the new item page title."
  newItem: String
  "Label used when no items are found."
  notFound: String
  "Label used when no items are in the trash."
  notFoundInTrash: String
  "Label used to prefix parents of hierarchical items."
  parentItemColon: String
  "Label for removing the featured image."
  removeFeaturedImage: String
  "Label for searching plural items."
  searchItems: String
  "Label for setting the featured image."
  setFeaturedImage: String
  "Name for one object of this post type."
  singularName: String
  "Label for the media frame filter."
  uploadedToThisItem: String
  "Label in the media frame for using a featured image."
  useFeaturedImage: String
  "Label for viewing a singular item."
  viewItem: String
  "Label for viewing post type archives."
  viewItems: String
}

type PostTypeSEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  readingTime: Float
  schema: SEOPostTypeSchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"The PrivacyPolicyItem type"
type PrivacyPolicyItem implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: PrivacyPolicyItem_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the privacy_policy object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the PrivacyPolicyItem type and the PrivacyPolicyItem type"
  preview: PrivacyPolicyItemToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The id field matches the WP_Post-&gt;ID field."
  privacyPolicyItemId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The Yoast SEO data of the PrivacyPolicyItem"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the PrivacyPolicyItem type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: PrivacyPolicyItemToTermNodeConnectionWhereArgs
  ): PrivacyPolicyItemToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): PrivacyPolicyItem
  "List all translated versions of this post"
  translations: [PrivacyPolicyItem]
  "The unique resource identifier path"
  uri: String
}

"Connection between the PrivacyPolicyItem type and the PrivacyPolicyItem type"
type PrivacyPolicyItemToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: PrivacyPolicyItem
}

"Connection between the PrivacyPolicyItem type and the TermNode type"
type PrivacyPolicyItemToTermNodeConnection {
  "Edges for the PrivacyPolicyItemToTermNodeConnection connection"
  edges: [PrivacyPolicyItemToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type PrivacyPolicyItemToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type PrivacyPolicyItem_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"Product"
type ProductField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ProductFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: ProductFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ProductFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Price"
  productPrice: String
  "Product Type"
  productType: String
  "Use Inline Quantity"
  productUseQuantity: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ProductFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ProductFieldDescription {
  descText: String
}

"Help Text"
type ProductFieldHelp {
  helpText: String
}

"Quantity"
type QuantityField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: QuantityFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: QuantityFieldDescription
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: QuantityFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Number Options"
  number: QuantityFieldNumber
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Product"
  productAssignment: String
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type QuantityFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type QuantityFieldDescription {
  descText: String
}

"Help Text"
type QuantityFieldHelp {
  helpText: String
}

"Number Options"
type QuantityFieldNumber {
  "Max"
  numMax: Int
  "Min"
  numMin: Int
  "Step"
  numStep: String
}

"The reading setting type"
type ReadingSettings {
  "Максимум страниц блога для показа."
  postsPerPage: Int
}

"Recaptcha"
type RecaptchaField implements DatabaseIdentifier & FormField & Node {
  "Custom Class Names"
  classes: RecaptchaFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "Visibility"
  size: String
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type RecaptchaFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

type Recaptcha_v3Field implements DatabaseIdentifier & FormField & Node {
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label of the field"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"The Recruit type"
type Recruit implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the recruit object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the Recruit type and the Recruit type"
  preview: RecruitToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The id field matches the WP_Post-&gt;ID field."
  recruitId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The Yoast SEO data of the Recruit"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the Recruit type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RecruitToTermNodeConnectionWhereArgs
  ): RecruitToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Recruit
  "List all translated versions of this post"
  translations: [Recruit]
  "The unique resource identifier path"
  uri: String
}

"Connection between the Recruit type and the Recruit type"
type RecruitToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: Recruit
}

"Connection between the Recruit type and the TermNode type"
type RecruitToTermNodeConnection {
  "Edges for the RecruitToTermNodeConnection connection"
  edges: [RecruitToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RecruitToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"The payload for the registerUser mutation"
type RegisterUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"Repeatable Fieldset"
type RepeaterField implements DatabaseIdentifier & FormField & Node {
  "Custom Class Names"
  classes: RepeaterFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: RepeaterFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type RepeaterFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type RepeaterFieldDescription {
  descText: String
}

"The payload for the resetUserPassword mutation"
type ResetUserPasswordPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"The payload for the restoreComment mutation"
type RestoreCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The restored comment object"
  comment: Comment
  "The ID of the restored comment"
  restoredId: ID
}

"The Review type"
type Review implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the review object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the Review type and the postFormat type"
  postFormats(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: ReviewToPostFormatConnectionWhereArgs
  ): ReviewToPostFormatConnection
  "Connection between the Review type and the Review type"
  preview: ReviewToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "Added to the GraphQL Schema because the ACF Field Group &quot;Отзыв&quot; was set to Show in GraphQL."
  review: Review_Review
  "The id field matches the WP_Post-&gt;ID field."
  reviewId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The Yoast SEO data of the Review"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the Review type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: ReviewToTermNodeConnectionWhereArgs
  ): ReviewToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Review
  "List all translated versions of this post"
  translations: [Review]
  "The unique resource identifier path"
  uri: String
}

"Connection between the Review type and the postFormat type"
type ReviewToPostFormatConnection {
  "Edges for the ReviewToPostFormatConnection connection"
  edges: [ReviewToPostFormatConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [PostFormat]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type ReviewToPostFormatConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary post_format"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: PostFormat
}

"Connection between the Review type and the Review type"
type ReviewToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: Review
}

"Connection between the Review type and the TermNode type"
type ReviewToTermNodeConnection {
  "Edges for the ReviewToTermNodeConnection connection"
  edges: [ReviewToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type ReviewToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Field Group"
type Review_Review implements AcfFieldGroup {
  "Состав ссылки: https:// + domain + .zone"
  companylink: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  "Выберите с кем работали"
  position: String
  "Имя, оставляющего отзыв, человека"
  respondent: String
  skills: [Review_Review_Skills]
}

"The root mutation"
type RootMutation {
  "The payload for the createAboutItem mutation"
  createAboutItem(
    "Input for the createAboutItem mutation"
    input: CreateAboutItemInput!
  ): CreateAboutItemPayload
  "The payload for the createCategory mutation"
  createCategory(
    "Input for the createCategory mutation"
    input: CreateCategoryInput!
  ): CreateCategoryPayload
  "The payload for the createComment mutation"
  createComment(
    "Input for the createComment mutation"
    input: CreateCommentInput!
  ): CreateCommentPayload
  "The payload for the createContactItem mutation"
  createContactItem(
    "Input for the createContactItem mutation"
    input: CreateContactItemInput!
  ): CreateContactItemPayload
  "The payload for the createFeedbackItem mutation"
  createFeedbackItem(
    "Input for the createFeedbackItem mutation"
    input: CreateFeedbackItemInput!
  ): CreateFeedbackItemPayload
  "The payload for the createFooterItem mutation"
  createFooterItem(
    "Input for the createFooterItem mutation"
    input: CreateFooterItemInput!
  ): CreateFooterItemPayload
  "The payload for the createFragment mutation"
  createFragment(
    "Input for the createFragment mutation"
    input: CreateFragmentInput!
  ): CreateFragmentPayload
  "The payload for the createHeroItem mutation"
  createHeroItem(
    "Input for the createHeroItem mutation"
    input: CreateHeroItemInput!
  ): CreateHeroItemPayload
  "The payload for the createMediaItem mutation"
  createMediaItem(
    "Input for the createMediaItem mutation"
    input: CreateMediaItemInput!
  ): CreateMediaItemPayload
  "The payload for the createMessenger mutation"
  createMessenger(
    "Input for the createMessenger mutation"
    input: CreateMessengerInput!
  ): CreateMessengerPayload
  "The payload for the createNavigationItem mutation"
  createNavigationItem(
    "Input for the createNavigationItem mutation"
    input: CreateNavigationItemInput!
  ): CreateNavigationItemPayload
  "The payload for the createPage mutation"
  createPage("Input for the createPage mutation" input: CreatePageInput!): CreatePagePayload
  "The payload for the createPost mutation"
  createPost("Input for the createPost mutation" input: CreatePostInput!): CreatePostPayload
  "The payload for the createPostFormat mutation"
  createPostFormat(
    "Input for the createPostFormat mutation"
    input: CreatePostFormatInput!
  ): CreatePostFormatPayload
  "The payload for the createPrivacyPolicyItem mutation"
  createPrivacyPolicyItem(
    "Input for the createPrivacyPolicyItem mutation"
    input: CreatePrivacyPolicyItemInput!
  ): CreatePrivacyPolicyItemPayload
  "The payload for the createRecruit mutation"
  createRecruit(
    "Input for the createRecruit mutation"
    input: CreateRecruitInput!
  ): CreateRecruitPayload
  "The payload for the createReview mutation"
  createReview("Input for the createReview mutation" input: CreateReviewInput!): CreateReviewPayload
  "The payload for the createSkill mutation"
  createSkill("Input for the createSkill mutation" input: CreateSkillInput!): CreateSkillPayload
  "The payload for the createSkillCategory mutation"
  createSkillCategory(
    "Input for the createSkillCategory mutation"
    input: CreateSkillCategoryInput!
  ): CreateSkillCategoryPayload
  "The payload for the createSocialNetwork mutation"
  createSocialNetwork(
    "Input for the createSocialNetwork mutation"
    input: CreateSocialNetworkInput!
  ): CreateSocialNetworkPayload
  "The payload for the createTag mutation"
  createTag("Input for the createTag mutation" input: CreateTagInput!): CreateTagPayload
  "The payload for the createUser mutation"
  createUser("Input for the createUser mutation" input: CreateUserInput!): CreateUserPayload
  "The payload for the deleteAboutItem mutation"
  deleteAboutItem(
    "Input for the deleteAboutItem mutation"
    input: DeleteAboutItemInput!
  ): DeleteAboutItemPayload
  "The payload for the deleteCategory mutation"
  deleteCategory(
    "Input for the deleteCategory mutation"
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload
  "The payload for the deleteComment mutation"
  deleteComment(
    "Input for the deleteComment mutation"
    input: DeleteCommentInput!
  ): DeleteCommentPayload
  "The payload for the deleteContactItem mutation"
  deleteContactItem(
    "Input for the deleteContactItem mutation"
    input: DeleteContactItemInput!
  ): DeleteContactItemPayload
  "The payload for the deleteFeedbackItem mutation"
  deleteFeedbackItem(
    "Input for the deleteFeedbackItem mutation"
    input: DeleteFeedbackItemInput!
  ): DeleteFeedbackItemPayload
  "The payload for the deleteFooterItem mutation"
  deleteFooterItem(
    "Input for the deleteFooterItem mutation"
    input: DeleteFooterItemInput!
  ): DeleteFooterItemPayload
  "The payload for the deleteFragment mutation"
  deleteFragment(
    "Input for the deleteFragment mutation"
    input: DeleteFragmentInput!
  ): DeleteFragmentPayload
  "The payload for the deleteHeroItem mutation"
  deleteHeroItem(
    "Input for the deleteHeroItem mutation"
    input: DeleteHeroItemInput!
  ): DeleteHeroItemPayload
  "The payload for the deleteMediaItem mutation"
  deleteMediaItem(
    "Input for the deleteMediaItem mutation"
    input: DeleteMediaItemInput!
  ): DeleteMediaItemPayload
  "The payload for the deleteMessenger mutation"
  deleteMessenger(
    "Input for the deleteMessenger mutation"
    input: DeleteMessengerInput!
  ): DeleteMessengerPayload
  "The payload for the deleteNavigationItem mutation"
  deleteNavigationItem(
    "Input for the deleteNavigationItem mutation"
    input: DeleteNavigationItemInput!
  ): DeleteNavigationItemPayload
  "The payload for the deletePage mutation"
  deletePage("Input for the deletePage mutation" input: DeletePageInput!): DeletePagePayload
  "The payload for the deletePost mutation"
  deletePost("Input for the deletePost mutation" input: DeletePostInput!): DeletePostPayload
  "The payload for the deletePostFormat mutation"
  deletePostFormat(
    "Input for the deletePostFormat mutation"
    input: DeletePostFormatInput!
  ): DeletePostFormatPayload
  "The payload for the deletePrivacyPolicyItem mutation"
  deletePrivacyPolicyItem(
    "Input for the deletePrivacyPolicyItem mutation"
    input: DeletePrivacyPolicyItemInput!
  ): DeletePrivacyPolicyItemPayload
  "The payload for the deleteRecruit mutation"
  deleteRecruit(
    "Input for the deleteRecruit mutation"
    input: DeleteRecruitInput!
  ): DeleteRecruitPayload
  "The payload for the deleteReview mutation"
  deleteReview("Input for the deleteReview mutation" input: DeleteReviewInput!): DeleteReviewPayload
  "The payload for the deleteSkill mutation"
  deleteSkill("Input for the deleteSkill mutation" input: DeleteSkillInput!): DeleteSkillPayload
  "The payload for the deleteSkillCategory mutation"
  deleteSkillCategory(
    "Input for the deleteSkillCategory mutation"
    input: DeleteSkillCategoryInput!
  ): DeleteSkillCategoryPayload
  "The payload for the deleteSocialNetwork mutation"
  deleteSocialNetwork(
    "Input for the deleteSocialNetwork mutation"
    input: DeleteSocialNetworkInput!
  ): DeleteSocialNetworkPayload
  "The payload for the deleteTag mutation"
  deleteTag("Input for the deleteTag mutation" input: DeleteTagInput!): DeleteTagPayload
  "The payload for the deleteUser mutation"
  deleteUser("Input for the deleteUser mutation" input: DeleteUserInput!): DeleteUserPayload
  "Increase the count."
  increaseCount("The count to increase" count: Int): Int
  "The payload for the registerUser mutation"
  registerUser("Input for the registerUser mutation" input: RegisterUserInput!): RegisterUserPayload
  "The payload for the resetUserPassword mutation"
  resetUserPassword(
    "Input for the resetUserPassword mutation"
    input: ResetUserPasswordInput!
  ): ResetUserPasswordPayload
  "The payload for the restoreComment mutation"
  restoreComment(
    "Input for the restoreComment mutation"
    input: RestoreCommentInput!
  ): RestoreCommentPayload
  "The payload for the sendPasswordResetEmail mutation"
  sendPasswordResetEmail(
    "Input for the sendPasswordResetEmail mutation"
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload
  "The payload for the submitForm mutation"
  submitForm("Input for the submitForm mutation" input: SubmitFormInput!): SubmitFormPayload
  "The payload for the updateAboutItem mutation"
  updateAboutItem(
    "Input for the updateAboutItem mutation"
    input: UpdateAboutItemInput!
  ): UpdateAboutItemPayload
  "The payload for the UpdateCategory mutation"
  updateCategory(
    "Input for the UpdateCategory mutation"
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload
  "The payload for the updateComment mutation"
  updateComment(
    "Input for the updateComment mutation"
    input: UpdateCommentInput!
  ): UpdateCommentPayload
  "The payload for the updateContactItem mutation"
  updateContactItem(
    "Input for the updateContactItem mutation"
    input: UpdateContactItemInput!
  ): UpdateContactItemPayload
  "The payload for the updateFeedbackItem mutation"
  updateFeedbackItem(
    "Input for the updateFeedbackItem mutation"
    input: UpdateFeedbackItemInput!
  ): UpdateFeedbackItemPayload
  "The payload for the updateFooterItem mutation"
  updateFooterItem(
    "Input for the updateFooterItem mutation"
    input: UpdateFooterItemInput!
  ): UpdateFooterItemPayload
  "The payload for the updateFragment mutation"
  updateFragment(
    "Input for the updateFragment mutation"
    input: UpdateFragmentInput!
  ): UpdateFragmentPayload
  "The payload for the updateHeroItem mutation"
  updateHeroItem(
    "Input for the updateHeroItem mutation"
    input: UpdateHeroItemInput!
  ): UpdateHeroItemPayload
  "The payload for the updateMediaItem mutation"
  updateMediaItem(
    "Input for the updateMediaItem mutation"
    input: UpdateMediaItemInput!
  ): UpdateMediaItemPayload
  "The payload for the updateMessenger mutation"
  updateMessenger(
    "Input for the updateMessenger mutation"
    input: UpdateMessengerInput!
  ): UpdateMessengerPayload
  "The payload for the updateNavigationItem mutation"
  updateNavigationItem(
    "Input for the updateNavigationItem mutation"
    input: UpdateNavigationItemInput!
  ): UpdateNavigationItemPayload
  "The payload for the updatePage mutation"
  updatePage("Input for the updatePage mutation" input: UpdatePageInput!): UpdatePagePayload
  "The payload for the updatePost mutation"
  updatePost("Input for the updatePost mutation" input: UpdatePostInput!): UpdatePostPayload
  "The payload for the UpdatePostFormat mutation"
  updatePostFormat(
    "Input for the UpdatePostFormat mutation"
    input: UpdatePostFormatInput!
  ): UpdatePostFormatPayload
  "The payload for the updatePrivacyPolicyItem mutation"
  updatePrivacyPolicyItem(
    "Input for the updatePrivacyPolicyItem mutation"
    input: UpdatePrivacyPolicyItemInput!
  ): UpdatePrivacyPolicyItemPayload
  "The payload for the updateRecruit mutation"
  updateRecruit(
    "Input for the updateRecruit mutation"
    input: UpdateRecruitInput!
  ): UpdateRecruitPayload
  "The payload for the updateReview mutation"
  updateReview("Input for the updateReview mutation" input: UpdateReviewInput!): UpdateReviewPayload
  "The payload for the updateSettings mutation"
  updateSettings(
    "Input for the updateSettings mutation"
    input: UpdateSettingsInput!
  ): UpdateSettingsPayload
  "The payload for the updateSkill mutation"
  updateSkill("Input for the updateSkill mutation" input: UpdateSkillInput!): UpdateSkillPayload
  "The payload for the UpdateSkillCategory mutation"
  updateSkillCategory(
    "Input for the UpdateSkillCategory mutation"
    input: UpdateSkillCategoryInput!
  ): UpdateSkillCategoryPayload
  "The payload for the updateSocialNetwork mutation"
  updateSocialNetwork(
    "Input for the updateSocialNetwork mutation"
    input: UpdateSocialNetworkInput!
  ): UpdateSocialNetworkPayload
  "The payload for the UpdateTag mutation"
  updateTag("Input for the UpdateTag mutation" input: UpdateTagInput!): UpdateTagPayload
  "The payload for the updateUser mutation"
  updateUser("Input for the updateUser mutation" input: UpdateUserInput!): UpdateUserPayload
}

"The root entry point into the Graph"
type RootQuery {
  "An object of the AboutItem Type. "
  aboutItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: AboutItemIdType
  ): AboutItem
  "A AboutItem object"
  aboutItemBy(
    "Get the AboutItem by its database ID"
    aboutItemId: Int
    "Get the object by its global ID"
    id: ID
    "Get the AboutItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the AboutItem by its uri"
    uri: String
  ): AboutItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the AboutItem type"
  aboutItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToAboutItemConnectionWhereArgs
  ): RootQueryToAboutItemConnection
  "Entry point to get all settings for the site"
  allSettings: Settings
  "Connection between the RootQuery type and the category type"
  categories(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToCategoryConnectionWhereArgs
  ): RootQueryToCategoryConnection
  "A 0bject"
  category(
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: CategoryIdType
  ): Category
  "Returns a Comment"
  comment("Unique identifier for the comment node." id: ID!): Comment
  "Connection between the RootQuery type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToCommentConnectionWhereArgs
  ): RootQueryToCommentConnection
  "An object of the ContactItem Type. "
  contactItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: ContactItemIdType
  ): ContactItem
  "A ContactItem object"
  contactItemBy(
    "Get the ContactItem by its database ID"
    contactItemId: Int
    "Get the object by its global ID"
    id: ID
    "Get the ContactItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the ContactItem by its uri"
    uri: String
  ): ContactItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the ContactItem type"
  contactItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToContactItemConnectionWhereArgs
  ): RootQueryToContactItemConnection
  "A node used to manage content"
  contentNode(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The content type the node is used for. Required when idType is set to \"name\" or \"slug\""
    contentType: ContentTypeEnum
    "Unique identifier for the content node."
    id: ID!
    "Type of unique identifier to fetch a content node by. Default is Global ID"
    idType: ContentNodeIdTypeEnum
  ): ContentNode
  "Connection between the RootQuery type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToContentNodeConnectionWhereArgs
  ): RootQueryToContentNodeConnection
  "Fetch a Content Type node by unique Identifier"
  contentType(
    "Unique Identifier for the Content Type node."
    id: ID!
    "Type of unique identifier to fetch a content type by. Default is Global ID"
    idType: ContentTypeIdTypeEnum
  ): ContentType
  "Connection between the RootQuery type and the ContentType type"
  contentTypes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToContentTypeConnection
  "Get language list"
  defaultLanguage: Language
  "Fields of the &#039;DiscussionSettings&#039; settings group"
  discussionSettings: DiscussionSettings
  "An object of the FeedbackItem Type. "
  feedbackItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: FeedbackItemIdType
  ): FeedbackItem
  "A FeedbackItem object"
  feedbackItemBy(
    "Get the FeedbackItem by its database ID"
    feedbackItemId: Int
    "Get the object by its global ID"
    id: ID
    "Get the FeedbackItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the FeedbackItem by its uri"
    uri: String
  ): FeedbackItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the FeedbackItem type"
  feedbackItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToFeedbackItemConnectionWhereArgs
  ): RootQueryToFeedbackItemConnection
  "An object of the FooterItem Type. "
  footerItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: FooterItemIdType
  ): FooterItem
  "A FooterItem object"
  footerItemBy(
    "Get the FooterItem by its database ID"
    footerItemId: Int
    "Get the object by its global ID"
    id: ID
    "Get the FooterItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the FooterItem by its uri"
    uri: String
  ): FooterItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the FooterItem type"
  footerItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToFooterItemConnectionWhereArgs
  ): RootQueryToFooterItemConnection
  "Ninja form object data."
  form(id: ID!, idType: FormIdTypeEnum): Form
  formField(id: ID!, idType: FormIdTypeEnum): FormField
  "Connection between the RootQuery type and the Form type"
  forms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToFormConnection
  "An object of the Fragment Type. "
  fragment(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: FragmentIdType
  ): Fragment
  "A Fragment object"
  fragmentBy(
    "Get the Fragment by its database ID"
    fragmentId: Int
    "Get the object by its global ID"
    id: ID
    "Get the Fragment by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the Fragment by its uri"
    uri: String
  ): Fragment
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the Fragment type"
  fragments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToFragmentConnectionWhereArgs
  ): RootQueryToFragmentConnection
  "Fields of the &#039;GeneralSettings&#039; settings group"
  generalSettings: GeneralSettings
  "An object of the HeroItem Type. "
  heroItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: HeroItemIdType
  ): HeroItem
  "A HeroItem object"
  heroItemBy(
    "Get the HeroItem by its database ID"
    heroItemId: Int
    "Get the object by its global ID"
    id: ID
    "Get the HeroItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the HeroItem by its uri"
    uri: String
  ): HeroItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the HeroItem type"
  heroItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToHeroItemConnectionWhereArgs
  ): RootQueryToHeroItemConnection
  "List available languages"
  languages: [Language]
  "An object of the mediaItem Type. "
  mediaItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: MediaItemIdType
  ): MediaItem
  "A mediaItem object"
  mediaItemBy(
    "Get the object by its global ID"
    id: ID
    "Get the mediaItem by its database ID"
    mediaItemId: Int
    "Get the mediaItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the mediaItem by its uri"
    uri: String
  ): MediaItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the mediaItem type"
  mediaItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToMediaItemConnectionWhereArgs
  ): RootQueryToMediaItemConnection
  "A WordPress navigation menu"
  menu(
    "The globally unique identifier of the menu."
    id: ID!
    "Type of unique identifier to fetch a menu by. Default is Global ID"
    idType: MenuNodeIdTypeEnum
  ): Menu
  "A WordPress navigation menu item"
  menuItem(
    "The globally unique identifier of the menu item."
    id: ID!
    "Type of unique identifier to fetch a menu item by. Default is Global ID"
    idType: MenuItemNodeIdTypeEnum
  ): MenuItem
  "Connection between the RootQuery type and the MenuItem type"
  menuItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToMenuItemConnectionWhereArgs
  ): RootQueryToMenuItemConnection
  "Connection between the RootQuery type and the Menu type"
  menus(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToMenuConnectionWhereArgs
  ): RootQueryToMenuConnection
  "An object of the Messenger Type. "
  messenger(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: MessengerIdType
  ): Messenger
  "A Messenger object"
  messengerBy(
    "Get the object by its global ID"
    id: ID
    "Get the Messenger by its database ID"
    messengerId: Int
    "Get the Messenger by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the Messenger by its uri"
    uri: String
  ): Messenger
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the Messenger type"
  messengers(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToMessengerConnectionWhereArgs
  ): RootQueryToMessengerConnection
  "An object of the NavigationItem Type. "
  navigationItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: NavigationItemIdType
  ): NavigationItem
  "A NavigationItem object"
  navigationItemBy(
    "Get the object by its global ID"
    id: ID
    "Get the NavigationItem by its database ID"
    navigationItemId: Int
    "Get the NavigationItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the NavigationItem by its uri"
    uri: String
  ): NavigationItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the NavigationItem type"
  navigationItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToNavigationItemConnectionWhereArgs
  ): RootQueryToNavigationItemConnection
  "Fetches an object given its ID"
  node("The unique identifier of the node" id: ID): Node
  "Fetches an object given its Unique Resource Identifier"
  nodeByUri(
    "Unique Resource Identifier in the form of a path or permalink for a node. Ex: \"/hello-world\""
    uri: String!
  ): UniformResourceIdentifiable
  "An object of the page Type. "
  page(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: PageIdType
  ): Page
  "A page object"
  pageBy(
    "Get the object by its global ID"
    id: ID
    "Get the page by its database ID"
    pageId: Int
    "Get the page by its uri"
    uri: String
  ): Page
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the page type"
  pages(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToPageConnectionWhereArgs
  ): RootQueryToPageConnection
  "A WordPress plugin"
  plugin("The globally unique identifier of the plugin." id: ID!): Plugin
  "Connection between the RootQuery type and the Plugin type"
  plugins(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToPluginConnection
  "An object of the post Type. "
  post(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: PostIdType
  ): Post
  "A post object"
  postBy(
    "Get the object by its global ID"
    id: ID
    "Get the post by its database ID"
    postId: Int
    "Get the post by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the post by its uri"
    uri: String
  ): Post
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "A 0bject"
  postFormat(
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: PostFormatIdType
  ): PostFormat
  "Connection between the RootQuery type and the postFormat type"
  postFormats(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToPostFormatConnectionWhereArgs
  ): RootQueryToPostFormatConnection
  "Connection between the RootQuery type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToPostConnectionWhereArgs
  ): RootQueryToPostConnection
  "An object of the PrivacyPolicyItem Type. "
  privacyPolicyItem(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: PrivacyPolicyItemIdType
  ): PrivacyPolicyItem
  "A PrivacyPolicyItem object"
  privacyPolicyItemBy(
    "Get the object by its global ID"
    id: ID
    "Get the PrivacyPolicyItem by its database ID"
    privacyPolicyItemId: Int
    "Get the PrivacyPolicyItem by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the PrivacyPolicyItem by its uri"
    uri: String
  ): PrivacyPolicyItem
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the PrivacyPolicyItem type"
  privacyPolicyItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToPrivacyPolicyItemConnectionWhereArgs
  ): RootQueryToPrivacyPolicyItemConnection
  "Fields of the &#039;ReadingSettings&#039; settings group"
  readingSettings: ReadingSettings
  "An object of the Recruit Type. "
  recruit(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: RecruitIdType
  ): Recruit
  "A Recruit object"
  recruitBy(
    "Get the object by its global ID"
    id: ID
    "Get the Recruit by its database ID"
    recruitId: Int
    "Get the Recruit by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the Recruit by its uri"
    uri: String
  ): Recruit
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the Recruit type"
  recruits(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToRecruitConnectionWhereArgs
  ): RootQueryToRecruitConnection
  "Connection between the RootQuery type and the EnqueuedScript type"
  registeredScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToEnqueuedScriptConnection
  "Connection between the RootQuery type and the EnqueuedStylesheet type"
  registeredStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToEnqueuedStylesheetConnection
  "An object of the Review Type. "
  review(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: ReviewIdType
  ): Review
  "A Review object"
  reviewBy(
    "Get the object by its global ID"
    id: ID
    "Get the Review by its database ID"
    reviewId: Int
    "Get the Review by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the Review by its uri"
    uri: String
  ): Review
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the Review type"
  reviews(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToReviewConnectionWhereArgs
  ): RootQueryToReviewConnection
  "Connection between the RootQuery type and the ContentRevisionUnion type"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToContentRevisionUnionConnectionWhereArgs
  ): RootQueryToContentRevisionUnionConnection
  "Returns seo site data"
  seo: SEOConfig
  "An object of the Skill Type. "
  skill(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: SkillIdType
  ): Skill
  "A Skill object"
  skillBy(
    "Get the object by its global ID"
    id: ID
    "Get the Skill by its database ID"
    skillId: Int
    "Get the Skill by its uri"
    uri: String
  ): Skill
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the SkillCategory type"
  skillCategories(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToSkillCategoryConnectionWhereArgs
  ): RootQueryToSkillCategoryConnection
  "A 0bject"
  skillCategory(
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: SkillCategoryIdType
  ): SkillCategory
  "Connection between the RootQuery type and the Skill type"
  skills(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToSkillConnectionWhereArgs
  ): RootQueryToSkillConnection
  "An object of the SocialNetwork Type. "
  socialNetwork(
    "Whether to return the node as a preview instance"
    asPreview: Boolean
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: SocialNetworkIdType
  ): SocialNetwork
  "A SocialNetwork object"
  socialNetworkBy(
    "Get the object by its global ID"
    id: ID
    "Get the SocialNetwork by its slug (only available for non-hierarchical types)"
    slug: String
    "Get the SocialNetwork by its database ID"
    socialNetworkId: Int
    "Get the SocialNetwork by its uri"
    uri: String
  ): SocialNetwork
    @deprecated(
      reason: "Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)"
    )
  "Connection between the RootQuery type and the SocialNetwork type"
  socialNetworks(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToSocialNetworkConnectionWhereArgs
  ): RootQueryToSocialNetworkConnection
  "A 0bject"
  tag(
    "The globally unique identifier of the object."
    id: ID!
    "Type of unique identifier to fetch by. Default is Global ID"
    idType: TagIdType
  ): Tag
  "Connection between the RootQuery type and the tag type"
  tags(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToTagConnectionWhereArgs
  ): RootQueryToTagConnection
  "Connection between the RootQuery type and the Taxonomy type"
  taxonomies(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToTaxonomyConnection
  "Fetch a Taxonomy node by unique Identifier"
  taxonomy(
    "Unique Identifier for the Taxonomy node."
    id: ID!
    "Type of unique identifier to fetch a taxonomy by. Default is Global ID"
    idType: TaxonomyIdTypeEnum
  ): Taxonomy
  "A node in a taxonomy used to group and relate content nodes"
  termNode(
    "Unique identifier for the term node."
    id: ID!
    "Type of unique identifier to fetch a term node by. Default is Global ID"
    idType: TermNodeIdTypeEnum
    "The taxonomy of the tern node. Required when idType is set to \"name\" or \"slug\""
    taxonomy: TaxonomyEnum
  ): TermNode
  "Connection between the RootQuery type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToTermNodeConnectionWhereArgs
  ): RootQueryToTermNodeConnection
  "A Theme object"
  theme("The globally unique identifier of the theme." id: ID!): Theme
  "Connection between the RootQuery type and the Theme type"
  themes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToThemeConnection
  "Translate string using pll_translate_string() (Polylang)"
  translateString(language: LanguageCodeEnum!, string: String!): String
  "Returns a user"
  user(
    "The globally unique identifier of the user."
    id: ID!
    "Type of unique identifier to fetch a user by. Default is Global ID"
    idType: UserNodeIdTypeEnum
  ): User
  "Returns a user role"
  userRole("The globally unique identifier of the user object." id: ID!): UserRole
  "Connection between the RootQuery type and the UserRole type"
  userRoles(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): RootQueryToUserRoleConnection
  "Connection between the RootQuery type and the User type"
  users(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: RootQueryToUserConnectionWhereArgs
  ): RootQueryToUserConnection
  "Returns the current user"
  viewer: User
  "Fields of the &#039;WritingSettings&#039; settings group"
  writingSettings: WritingSettings
}

"Connection between the RootQuery type and the AboutItem type"
type RootQueryToAboutItemConnection {
  "Edges for the RootQueryToAboutItemConnection connection"
  edges: [RootQueryToAboutItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [AboutItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToAboutItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: AboutItem
}

"Connection between the RootQuery type and the category type"
type RootQueryToCategoryConnection {
  "Edges for the RootQueryToCategoryConnection connection"
  edges: [RootQueryToCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Category]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Category
}

"Connection between the RootQuery type and the Comment type"
type RootQueryToCommentConnection {
  "Edges for the RootQueryToCommentConnection connection"
  edges: [RootQueryToCommentConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Comment]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToCommentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment
}

"Connection between the RootQuery type and the ContactItem type"
type RootQueryToContactItemConnection {
  "Edges for the RootQueryToContactItemConnection connection"
  edges: [RootQueryToContactItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContactItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToContactItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContactItem
}

"Connection between the RootQuery type and the ContentNode type"
type RootQueryToContentNodeConnection {
  "Edges for the RootQueryToContentNodeConnection connection"
  edges: [RootQueryToContentNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToContentNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the RootQuery type and the ContentRevisionUnion type"
type RootQueryToContentRevisionUnionConnection {
  "Edges for the RootQueryToContentRevisionUnionConnection connection"
  edges: [RootQueryToContentRevisionUnionConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentRevisionUnion]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToContentRevisionUnionConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentRevisionUnion
}

"Connection between the RootQuery type and the ContentType type"
type RootQueryToContentTypeConnection {
  "Edges for the RootQueryToContentTypeConnection connection"
  edges: [RootQueryToContentTypeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentType]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToContentTypeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentType
}

"Connection between the RootQuery type and the EnqueuedScript type"
type RootQueryToEnqueuedScriptConnection {
  "Edges for the RootQueryToEnqueuedScriptConnection connection"
  edges: [RootQueryToEnqueuedScriptConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToEnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript
}

"Connection between the RootQuery type and the EnqueuedStylesheet type"
type RootQueryToEnqueuedStylesheetConnection {
  "Edges for the RootQueryToEnqueuedStylesheetConnection connection"
  edges: [RootQueryToEnqueuedStylesheetConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToEnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet
}

"Connection between the RootQuery type and the FeedbackItem type"
type RootQueryToFeedbackItemConnection {
  "Edges for the RootQueryToFeedbackItemConnection connection"
  edges: [RootQueryToFeedbackItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [FeedbackItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToFeedbackItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: FeedbackItem
}

"Connection between the RootQuery type and the FooterItem type"
type RootQueryToFooterItemConnection {
  "Edges for the RootQueryToFooterItemConnection connection"
  edges: [RootQueryToFooterItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [FooterItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToFooterItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: FooterItem
}

"Connection between the RootQuery type and the Form type"
type RootQueryToFormConnection {
  "Edges for the RootQueryToFormConnection connection"
  edges: [RootQueryToFormConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Form]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToFormConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Form
}

"Connection between the RootQuery type and the Fragment type"
type RootQueryToFragmentConnection {
  "Edges for the RootQueryToFragmentConnection connection"
  edges: [RootQueryToFragmentConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Fragment]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToFragmentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Fragment
}

"Connection between the RootQuery type and the HeroItem type"
type RootQueryToHeroItemConnection {
  "Edges for the RootQueryToHeroItemConnection connection"
  edges: [RootQueryToHeroItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [HeroItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToHeroItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: HeroItem
}

"Connection between the RootQuery type and the mediaItem type"
type RootQueryToMediaItemConnection {
  "Edges for the RootQueryToMediaItemConnection connection"
  edges: [RootQueryToMediaItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [MediaItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToMediaItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MediaItem
}

"Connection between the RootQuery type and the Menu type"
type RootQueryToMenuConnection {
  "Edges for the RootQueryToMenuConnection connection"
  edges: [RootQueryToMenuConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Menu]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToMenuConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Menu
}

"Connection between the RootQuery type and the MenuItem type"
type RootQueryToMenuItemConnection {
  "Edges for the RootQueryToMenuItemConnection connection"
  edges: [RootQueryToMenuItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [MenuItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToMenuItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MenuItem
}

"Connection between the RootQuery type and the Messenger type"
type RootQueryToMessengerConnection {
  "Edges for the RootQueryToMessengerConnection connection"
  edges: [RootQueryToMessengerConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Messenger]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToMessengerConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Messenger
}

"Connection between the RootQuery type and the NavigationItem type"
type RootQueryToNavigationItemConnection {
  "Edges for the RootQueryToNavigationItemConnection connection"
  edges: [RootQueryToNavigationItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [NavigationItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToNavigationItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: NavigationItem
}

"Connection between the RootQuery type and the page type"
type RootQueryToPageConnection {
  "Edges for the RootQueryToPageConnection connection"
  edges: [RootQueryToPageConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Page]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToPageConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Page
}

"Connection between the RootQuery type and the Plugin type"
type RootQueryToPluginConnection {
  "Edges for the RootQueryToPluginConnection connection"
  edges: [RootQueryToPluginConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Plugin]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToPluginConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Plugin
}

"Connection between the RootQuery type and the post type"
type RootQueryToPostConnection {
  "Edges for the RootQueryToPostConnection connection"
  edges: [RootQueryToPostConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Post]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToPostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post
}

"Connection between the RootQuery type and the postFormat type"
type RootQueryToPostFormatConnection {
  "Edges for the RootQueryToPostFormatConnection connection"
  edges: [RootQueryToPostFormatConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [PostFormat]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToPostFormatConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: PostFormat
}

"Connection between the RootQuery type and the PrivacyPolicyItem type"
type RootQueryToPrivacyPolicyItemConnection {
  "Edges for the RootQueryToPrivacyPolicyItemConnection connection"
  edges: [RootQueryToPrivacyPolicyItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [PrivacyPolicyItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToPrivacyPolicyItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: PrivacyPolicyItem
}

"Connection between the RootQuery type and the Recruit type"
type RootQueryToRecruitConnection {
  "Edges for the RootQueryToRecruitConnection connection"
  edges: [RootQueryToRecruitConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Recruit]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToRecruitConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Recruit
}

"Connection between the RootQuery type and the Review type"
type RootQueryToReviewConnection {
  "Edges for the RootQueryToReviewConnection connection"
  edges: [RootQueryToReviewConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Review]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToReviewConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Review
}

"Connection between the RootQuery type and the SkillCategory type"
type RootQueryToSkillCategoryConnection {
  "Edges for the RootQueryToSkillCategoryConnection connection"
  edges: [RootQueryToSkillCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [SkillCategory]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToSkillCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: SkillCategory
}

"Connection between the RootQuery type and the Skill type"
type RootQueryToSkillConnection {
  "Edges for the RootQueryToSkillConnection connection"
  edges: [RootQueryToSkillConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Skill]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToSkillConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Skill
}

"Connection between the RootQuery type and the SocialNetwork type"
type RootQueryToSocialNetworkConnection {
  "Edges for the RootQueryToSocialNetworkConnection connection"
  edges: [RootQueryToSocialNetworkConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [SocialNetwork]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToSocialNetworkConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: SocialNetwork
}

"Connection between the RootQuery type and the tag type"
type RootQueryToTagConnection {
  "Edges for the RootQueryToTagConnection connection"
  edges: [RootQueryToTagConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Tag]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToTagConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Tag
}

"Connection between the RootQuery type and the Taxonomy type"
type RootQueryToTaxonomyConnection {
  "Edges for the RootQueryToTaxonomyConnection connection"
  edges: [RootQueryToTaxonomyConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Taxonomy]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToTaxonomyConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Taxonomy
}

"Connection between the RootQuery type and the TermNode type"
type RootQueryToTermNodeConnection {
  "Edges for the RootQueryToTermNodeConnection connection"
  edges: [RootQueryToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"Connection between the RootQuery type and the Theme type"
type RootQueryToThemeConnection {
  "Edges for the RootQueryToThemeConnection connection"
  edges: [RootQueryToThemeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Theme]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToThemeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Theme
}

"Connection between the RootQuery type and the User type"
type RootQueryToUserConnection {
  "Edges for the RootQueryToUserConnection connection"
  edges: [RootQueryToUserConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [User]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToUserConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: User
}

"Connection between the RootQuery type and the UserRole type"
type RootQueryToUserRoleConnection {
  "Edges for the RootQueryToUserRoleConnection connection"
  edges: [RootQueryToUserRoleConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [UserRole]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type RootQueryToUserRoleConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: UserRole
}

"The Yoast SEO breadcrumb config"
type SEOBreadcrumbs {
  archivePrefix: String
  boldLast: Boolean
  enabled: Boolean
  homeText: String
  notFoundText: String
  prefix: String
  searchPrefix: String
  separator: String
  showBlogPage: Boolean
}

"The Yoast SEO site level configuration data"
type SEOConfig {
  breadcrumbs: SEOBreadcrumbs
  contentTypes: SEOContentTypes
  openGraph: SEOOpenGraph
  redirects: [SEORedirect]
  schema: SEOSchema
  social: SEOSocial
  webmaster: SEOWebmaster
}

"he Yoast SEO search appearance content types fields"
type SEOContentType {
  archive: SEOContentTypeArchive
  metaDesc: String
  metaRobotsNoindex: Boolean
  schema: SEOPageInfoSchema
  schemaType: String
  title: String
}

"he Yoast SEO search appearance content types fields"
type SEOContentTypeArchive {
  archiveLink: String
  breadcrumbTitle: String
  fullHead: String
  hasArchive: Boolean
  metaDesc: String
  metaRobotsNoindex: Boolean
  title: String
}

"The Yoast SEO search appearance content types"
type SEOContentTypes {
  aboutItem: SEOContentType
  contactItem: SEOContentType
  feedbackItem: SEOContentType
  footerItem: SEOContentType
  fragment: SEOContentType
  heroItem: SEOContentType
  mediaItem: SEOContentType
  messenger: SEOContentType
  navigationItem: SEOContentType
  page: SEOContentType
  post: SEOContentType
  privacyPolicyItem: SEOContentType
  recruit: SEOContentType
  review: SEOContentType
  skill: SEOContentType
  socialNetwork: SEOContentType
}

"The Open Graph data"
type SEOOpenGraph {
  defaultImage: MediaItem
  frontPage: SEOOpenGraphFrontPage
}

"The Open Graph Front page data"
type SEOOpenGraphFrontPage {
  description: String
  image: MediaItem
  title: String
}

"The Schema for post type"
type SEOPageInfoSchema {
  raw: String
}

type SEOPostTypeBreadcrumbs {
  text: String
  url: String
}

"The page info SEO details"
type SEOPostTypePageInfo {
  schema: SEOPageInfoSchema
}

"The Schema types"
type SEOPostTypeSchema {
  articleType: [String]
  pageType: [String]
  raw: String
}

"The Yoast redirect data  (Yoast Premium only)"
type SEORedirect {
  format: String
  origin: String
  target: String
  type: Int
}

"The Yoast SEO schema data"
type SEOSchema {
  companyLogo: MediaItem
  companyName: String
  companyOrPerson: String
  inLanguage: String
  logo: MediaItem
  personLogo: MediaItem
  personName: String
  siteName: String
  siteUrl: String
  wordpressSiteName: String
}

"The Yoast SEO Social media links"
type SEOSocial {
  facebook: SEOSocialFacebook
  instagram: SEOSocialInstagram
  linkedIn: SEOSocialLinkedIn
  mySpace: SEOSocialMySpace
  pinterest: SEOSocialPinterest
  twitter: SEOSocialTwitter
  wikipedia: SEOSocialWikipedia
  youTube: SEOSocialYoutube
}

type SEOSocialFacebook {
  defaultImage: MediaItem
  url: String
}

type SEOSocialInstagram {
  url: String
}

type SEOSocialLinkedIn {
  url: String
}

type SEOSocialMySpace {
  url: String
}

type SEOSocialPinterest {
  metaTag: String
  url: String
}

type SEOSocialTwitter {
  cardType: SEOCardType
  username: String
}

type SEOSocialWikipedia {
  url: String
}

type SEOSocialYoutube {
  url: String
}

"The Schema types for Taxonomy"
type SEOTaxonomySchema {
  raw: String
}

type SEOUser {
  fullHead: String
  metaDesc: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  schema: SEOUserSchema
  social: SEOUserSocial
  title: String
}

"The Schema types for User"
type SEOUserSchema {
  raw: String
}

type SEOUserSocial {
  facebook: String
  instagram: String
  linkedIn: String
  mySpace: String
  pinterest: String
  soundCloud: String
  twitter: String
  wikipedia: String
  youTube: String
}

"The Yoast SEO  webmaster fields"
type SEOWebmaster {
  baiduVerify: String
  googleVerify: String
  msVerify: String
  yandexVerify: String
}

"The payload for the sendPasswordResetEmail mutation"
type SendPasswordResetEmailPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The user that the password reset email was sent to"
  user: User
}

"All of the registered settings"
type Settings {
  "Settings of the the string Settings Group"
  discussionSettingsDefaultCommentStatus: String
  "Settings of the the string Settings Group"
  discussionSettingsDefaultPingStatus: String
  "Settings of the the string Settings Group"
  generalSettingsDateFormat: String
  "Settings of the the string Settings Group"
  generalSettingsDescription: String
  "Settings of the the string Settings Group"
  generalSettingsEmail: String
  "Settings of the the string Settings Group"
  generalSettingsLanguage: String
  "Settings of the the integer Settings Group"
  generalSettingsStartOfWeek: Int
  "Settings of the the string Settings Group"
  generalSettingsTimeFormat: String
  "Settings of the the string Settings Group"
  generalSettingsTimezone: String
  "Settings of the the string Settings Group"
  generalSettingsTitle: String
  "Settings of the the string Settings Group"
  generalSettingsUrl: String
  "Settings of the the integer Settings Group"
  readingSettingsPostsPerPage: Int
  "Settings of the the integer Settings Group"
  writingSettingsDefaultCategory: Int
  "Settings of the the string Settings Group"
  writingSettingsDefaultPostFormat: String
  "Settings of the the boolean Settings Group"
  writingSettingsUseSmilies: Boolean
}

"Shipping"
type ShippingField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ShippingFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: ShippingFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ShippingFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "The field is required?"
  required: Boolean
  "Cost"
  shippingCost: String
  "shipping_options"
  shippingOptions: [FieldOption]
  "Cost Type"
  shippingType: String
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ShippingFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ShippingFieldDescription {
  descText: String
}

"Help Text"
type ShippingFieldHelp {
  helpText: String
}

"The Skill type"
type Skill implements ContentNode & DatabaseIdentifier & HierarchicalContentNode & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithPageAttributes & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeAncestorsConnection
  "Connection between the HierarchicalContentNode type and the ContentNode type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs
  ): HierarchicalContentNodeToContentNodeChildrenConnection
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the skill object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Polylang language"
  language: Language
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "The parent of the node. The parent object can be of various types"
  parent: HierarchicalContentNodeToParentContentNodeConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "Connection between the Skill type and the postFormat type"
  postFormats(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: SkillToPostFormatConnectionWhereArgs
  ): SkillToPostFormatConnection
  "Connection between the Skill type and the Skill type"
  preview: SkillToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the Skill"
  seo: PostTypeSEO
  "Connection between the Skill type and the SkillCategory type"
  skillCategories(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: SkillToSkillCategoryConnectionWhereArgs
  ): SkillToSkillCategoryConnection
  "The id field matches the WP_Post-&gt;ID field."
  skillId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "Connection between the Skill type and the TermNode type"
  terms(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: SkillToTermNodeConnectionWhereArgs
  ): SkillToTermNodeConnection
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Skill
  "List all translated versions of this post"
  translations: [Skill]
  "The unique resource identifier path"
  uri: String
}

"The SkillCategory type"
type SkillCategory implements DatabaseIdentifier & HierarchicalTermNode & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  "The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root)."
  ancestors(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): SkillCategoryToAncestorsSkillCategoryConnection
  "Connection between the SkillCategory type and the SkillCategory type"
  children(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: SkillCategoryToSkillCategoryConnectionWhereArgs
  ): SkillCategoryToSkillCategoryConnection
  "Connection between the SkillCategory type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: SkillCategoryToContentNodeConnectionWhereArgs
  ): SkillCategoryToContentNodeConnection
  "The number of objects connected to the object"
  count: Int
  "The unique resource identifier path"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "List available translations for this post"
  language: Language
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "Connection between the SkillCategory type and the SkillCategory type"
  parent: SkillCategoryToParentSkillCategoryConnectionEdge
  "Database id of the parent node"
  parentDatabaseId: Int
  "The globally unique identifier of the parent node."
  parentId: ID
  "The Yoast SEO data of the Списки скиллов taxonomy."
  seo: TaxonomySEO
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для скиллов&quot; was set to Show in GraphQL."
  skillAddons: SkillCategory_Skilladdons
  "The id field matches the WP_Post-&gt;ID field."
  skillCategoryId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the SkillCategory type and the Skill type"
  skills(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: SkillCategoryToSkillConnectionWhereArgs
  ): SkillCategoryToSkillConnection
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "Connection between the SkillCategory type and the Taxonomy type"
  taxonomy: SkillCategoryToTaxonomyConnectionEdge
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): SkillCategory
  "List all translated versions of this term"
  translations: [SkillCategory]
  "The unique resource identifier path"
  uri: String
}

"Connection between the SkillCategory type and the SkillCategory type"
type SkillCategoryToAncestorsSkillCategoryConnection {
  "Edges for the SkillCategoryToAncestorsSkillCategoryConnection connection"
  edges: [SkillCategoryToAncestorsSkillCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [SkillCategory]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type SkillCategoryToAncestorsSkillCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: SkillCategory
}

"Connection between the SkillCategory type and the ContentNode type"
type SkillCategoryToContentNodeConnection {
  "Edges for the SkillCategoryToContentNodeConnection connection"
  edges: [SkillCategoryToContentNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type SkillCategoryToContentNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the SkillCategory type and the SkillCategory type"
type SkillCategoryToParentSkillCategoryConnectionEdge {
  "The node of the connection, without the edges"
  node: SkillCategory
}

"Connection between the SkillCategory type and the SkillCategory type"
type SkillCategoryToSkillCategoryConnection {
  "Edges for the SkillCategoryToSkillCategoryConnection connection"
  edges: [SkillCategoryToSkillCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [SkillCategory]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type SkillCategoryToSkillCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: SkillCategory
}

"Connection between the SkillCategory type and the Skill type"
type SkillCategoryToSkillConnection {
  "Edges for the SkillCategoryToSkillConnection connection"
  edges: [SkillCategoryToSkillConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Skill]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type SkillCategoryToSkillConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Skill
}

"Connection between the SkillCategory type and the Taxonomy type"
type SkillCategoryToTaxonomyConnectionEdge {
  "The node of the connection, without the edges"
  node: Taxonomy
}

"Field Group"
type SkillCategory_Skilladdons implements AcfFieldGroup {
  "The name of the ACF Field Group"
  fieldGroupName: String
  icon: MediaItem
}

"Connection between the Skill type and the postFormat type"
type SkillToPostFormatConnection {
  "Edges for the SkillToPostFormatConnection connection"
  edges: [SkillToPostFormatConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [PostFormat]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type SkillToPostFormatConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary post_format"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: PostFormat
}

"Connection between the Skill type and the Skill type"
type SkillToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: Skill
}

"Connection between the Skill type and the SkillCategory type"
type SkillToSkillCategoryConnection {
  "Edges for the SkillToSkillCategoryConnection connection"
  edges: [SkillToSkillCategoryConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [SkillCategory]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type SkillToSkillCategoryConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The Yoast SEO Primary skill_list"
  isPrimary: Boolean
  "The item at the end of the edge"
  node: SkillCategory
}

"Connection between the Skill type and the TermNode type"
type SkillToTermNodeConnection {
  "Edges for the SkillToTermNodeConnection connection"
  edges: [SkillToTermNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [TermNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type SkillToTermNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: TermNode
}

"The SocialNetwork type"
type SocialNetwork implements ContentNode & DatabaseIdentifier & MenuItemLinkable & Node & NodeWithContentEditor & NodeWithFeaturedImage & NodeWithTemplate & NodeWithTitle & UniformResourceIdentifiable {
  "The content of the post."
  content("Format of the field output" format: PostObjectFieldFormatEnum): String
  "Added to the GraphQL Schema because the ACF Field Group &quot;Аддоны для контента&quot; was set to Show in GraphQL."
  contentAddons: SocialNetwork_Contentaddons
  "Connection between the ContentNode type and the ContentType type"
  contentType: ContentNodeToContentTypeConnectionEdge
  "The unique resource identifier path"
  databaseId: Int!
  "Post publishing date."
  date: String
  "The publishing date set in GMT."
  dateGmt: String
  "The desired slug of the post"
  desiredSlug: String
  "If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds"
  editingLockedBy: ContentNodeToEditLockConnectionEdge
  "The RSS enclosure for the object"
  enclosure: String
  "Connection between the ContentNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedScriptConnection
  "Connection between the ContentNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): ContentNodeToEnqueuedStylesheetConnection
  "Connection between the NodeWithFeaturedImage type and the MediaItem type"
  featuredImage: NodeWithFeaturedImageToMediaItemConnectionEdge
  "The database identifier for the featured image node assigned to the content node"
  featuredImageDatabaseId: Int
  "Globally unique ID of the featured image assigned to the node"
  featuredImageId: ID
  "The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table."
  guid: String
  "The globally unique identifier of the social_networks object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is a node in the preview state"
  isPreview: Boolean
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "The user that most recently edited the node"
  lastEditedBy: ContentNodeToEditLastConnectionEdge
  "The permalink of the post"
  link: String
  "The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time."
  modified: String
  "The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT."
  modifiedGmt: String
  "Connection between the SocialNetwork type and the SocialNetwork type"
  preview: SocialNetworkToPreviewConnectionEdge
  "The database id of the preview node"
  previewRevisionDatabaseId: Int
  "Whether the object is a node in the preview state"
  previewRevisionId: ID
  "The Yoast SEO data of the SocialNetwork"
  seo: PostTypeSEO
  "The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table."
  slug: String
  "The id field matches the WP_Post-&gt;ID field."
  socialNetworkId: Int! @deprecated(reason: "Deprecated in favor of the databaseId field")
  "The current status of the object"
  status: String
  "The template assigned to a node of content"
  template: ContentTemplate
  "The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made."
  title("Format of the field output" format: PostObjectFieldFormatEnum): String
  "The unique resource identifier path"
  uri: String
}

"Connection between the SocialNetwork type and the SocialNetwork type"
type SocialNetworkToPreviewConnectionEdge {
  "The node of the connection, without the edges"
  node: SocialNetwork
}

"Field Group"
type SocialNetwork_Contentaddons implements AcfFieldGroup {
  content: String
  excerpt: String
  "The name of the ACF Field Group"
  fieldGroupName: String
  image: MediaItem
  order: Float
  role: String
  title: String
}

"Anti-Spam"
type SpamField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: SpamFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: SpamFieldDescription
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: SpamFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: SpamFieldInputLimitSet
  "Field Key"
  key: String
  "Question"
  label: String
  "Question Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "Answer"
  spamAnswer: String
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type SpamFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type SpamFieldDescription {
  descText: String
}

"Help Text"
type SpamFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type SpamFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"Star Rating"
type StarratingField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: StarratingFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "Number of stars"
  numberOfStars: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type StarratingFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Submit"
type SubmitField implements DatabaseIdentifier & FormField & Node {
  "Custom Class Names"
  classes: SubmitFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Processing Label"
  processingLabel: String
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type SubmitFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"The payload for the submitForm mutation"
type SubmitFormPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Field errors"
  errors: [FieldError]
  "Generic operation message"
  message: String
  "Form submitted successfuly"
  success: Boolean
}

"The tag type"
type Tag implements DatabaseIdentifier & MenuItemLinkable & Node & TermNode & UniformResourceIdentifiable {
  "Connection between the tag type and the ContentNode type"
  contentNodes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: TagToContentNodeConnectionWhereArgs
  ): TagToContentNodeConnection
  "The number of objects connected to the object"
  count: Int
  "The unique resource identifier path"
  databaseId: Int!
  "The description of the object"
  description: String
  "Connection between the TermNode type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedScriptConnection
  "Connection between the TermNode type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TermNodeToEnqueuedStylesheetConnection
  "The unique resource identifier path"
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "List available translations for this post"
  language: Language
  "The link to the term"
  link: String
  "The human friendly name of the object."
  name: String
  "Connection between the tag type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: TagToPostConnectionWhereArgs
  ): TagToPostConnection
  "The Yoast SEO data of the Метки taxonomy."
  seo: TaxonomySEO
  "An alphanumeric identifier for the object unique to its type."
  slug: String
  "The id field matches the WP_Post-&gt;ID field."
  tagId: Int @deprecated(reason: "Deprecated in favor of databaseId")
  "Connection between the tag type and the Taxonomy type"
  taxonomy: TagToTaxonomyConnectionEdge
  "The ID of the term group that this term object belongs to"
  termGroupId: Int
  "The taxonomy ID that the object is associated with"
  termTaxonomyId: Int
  "Get specific translation version of this object"
  translation(language: LanguageCodeEnum!): Tag
  "List all translated versions of this term"
  translations: [Tag]
  "The unique resource identifier path"
  uri: String
}

"Connection between the tag type and the ContentNode type"
type TagToContentNodeConnection {
  "Edges for the TagToContentNodeConnection connection"
  edges: [TagToContentNodeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentNode]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type TagToContentNodeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentNode
}

"Connection between the tag type and the post type"
type TagToPostConnection {
  "Edges for the TagToPostConnection connection"
  edges: [TagToPostConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Post]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type TagToPostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post
}

"Connection between the tag type and the Taxonomy type"
type TagToTaxonomyConnectionEdge {
  "The node of the connection, without the edges"
  node: Taxonomy
}

"A taxonomy object"
type Taxonomy implements Node {
  "List of Content Types associated with the Taxonomy"
  connectedContentTypes(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): TaxonomyToContentTypeConnection
  "Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description"
  description: String
  "The plural name of the post type within the GraphQL Schema."
  graphqlPluralName: String
  "The singular name of the post type within the GraphQL Schema."
  graphqlSingleName: String
  "Whether the taxonomy is hierarchical"
  hierarchical: Boolean
  "The globally unique identifier of the taxonomy object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Name of the taxonomy shown in the menu. Usually plural."
  label: String
  "The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label"
  name: String
  "Whether the taxonomy is publicly queryable"
  public: Boolean
  "Name of content type to diplay in REST API &quot;wp/v2&quot; namespace."
  restBase: String
  "The REST Controller class assigned to handling this content type."
  restControllerClass: String
  "Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud"
  showCloud: Boolean
  "Whether to display a column for the taxonomy on its post type listing screens."
  showInAdminColumn: Boolean
  "Whether to add the post type to the GraphQL Schema."
  showInGraphql: Boolean
  "Whether to show the taxonomy in the admin menu"
  showInMenu: Boolean
  "Whether the taxonomy is available for selection in navigation menus."
  showInNavMenus: Boolean
  "Whether to show the taxonomy in the quick/bulk edit panel."
  showInQuickEdit: Boolean
  "Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace."
  showInRest: Boolean
  "Whether to generate and allow a UI for managing terms in this taxonomy in the admin"
  showUi: Boolean
}

type TaxonomySEO {
  breadcrumbs: [SEOPostTypeBreadcrumbs]
  canonical: String
  cornerstone: Boolean
  focuskw: String
  fullHead: String
  metaDesc: String
  metaKeywords: String
  metaRobotsNofollow: String
  metaRobotsNoindex: String
  opengraphAuthor: String
  opengraphDescription: String
  opengraphImage: MediaItem
  opengraphModifiedTime: String
  opengraphPublishedTime: String
  opengraphPublisher: String
  opengraphSiteName: String
  opengraphTitle: String
  opengraphType: String
  opengraphUrl: String
  schema: SEOTaxonomySchema
  title: String
  twitterDescription: String
  twitterImage: MediaItem
  twitterTitle: String
}

"Connection between the Taxonomy type and the ContentType type"
type TaxonomyToContentTypeConnection {
  "Edges for the TaxonomyToContentTypeConnection connection"
  edges: [TaxonomyToContentTypeConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentType]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type TaxonomyToContentTypeConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentType
}

"Connection between the TermNode type and the EnqueuedScript type"
type TermNodeToEnqueuedScriptConnection {
  "Edges for the TermNodeToEnqueuedScriptConnection connection"
  edges: [TermNodeToEnqueuedScriptConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type TermNodeToEnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript
}

"Connection between the TermNode type and the EnqueuedStylesheet type"
type TermNodeToEnqueuedStylesheetConnection {
  "Edges for the TermNodeToEnqueuedStylesheetConnection connection"
  edges: [TermNodeToEnqueuedStylesheetConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type TermNodeToEnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet
}

"Terms List"
type TermsField implements DatabaseIdentifier & FormField & Node {
  "Add New Terms"
  addNewTerms: Boolean
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: TermsFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: TermsFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: TermsFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "options"
  options: [FieldOption]
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "Taxonomy"
  taxonomy: String
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type TermsFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type TermsFieldDescription {
  descText: String
}

"Help Text"
type TermsFieldHelp {
  helpText: String
}

"Paragraph Text"
type TextareaField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: TextareaFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: TextareaFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "Disable Input"
  disableInput: Boolean
  "Disable Rich Text Editor on Mobile"
  disableRteMobile: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: TextareaFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: TextareaFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "Show Media Upload Button"
  textareaMedia: Boolean
  "Show Rich Text Editor"
  textareaRte: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type TextareaFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type TextareaFieldDescription {
  descText: String
}

"Help Text"
type TextareaFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type TextareaFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"Single Line Text"
type TextboxField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: TextboxFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Mask"
  customMask: String
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: TextboxFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: TextboxFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: TextboxFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Input Mask"
  mask: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type TextboxFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type TextboxFieldDescription {
  descText: String
}

"Help Text"
type TextboxFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type TextboxFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"A theme object"
type Theme implements Node {
  "Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; )."
  author: String
  "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; )."
  authorUri: String
  "The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; )."
  description: String
  "The globally unique identifier of the theme object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; )."
  name: String
  "The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot()."
  screenshot: String
  "The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet()."
  slug: String
  "URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; )."
  tags: [String]
  "A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; )."
  themeUri: String
  "The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; )."
  version: String
}

"Total"
type TotalField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: TotalFieldClasses
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "Description"
  description: TotalFieldDescription
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: TotalFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type TotalFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type TotalFieldDescription {
  descText: String
}

"Help Text"
type TotalFieldHelp {
  helpText: String
}

"Unknown"
type UnknownField implements DatabaseIdentifier & FormField & Node {
  "Creation date"
  createdAt: Int
  "The Id of the field"
  databaseId: Int!
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "The globally unique identifier of the field"
  id: ID!
  "Key of the field"
  key: String
  "Label"
  label: String
  message: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "Indtifiable?"
  personallyIdentifiable: Boolean
  "The field is required?"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"The payload for the updateAboutItem mutation"
type UpdateAboutItemPayload {
  "The Post object mutation type."
  aboutItem: AboutItem
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
}

"The payload for the UpdateCategory mutation"
type UpdateCategoryPayload {
  "The created category"
  category: Category
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
}

"The payload for the updateComment mutation"
type UpdateCommentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment that was created"
  comment: Comment
  "Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache"
  success: Boolean
}

"The payload for the updateContactItem mutation"
type UpdateContactItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  contactItem: ContactItem
}

"The payload for the updateFeedbackItem mutation"
type UpdateFeedbackItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  feedbackItem: FeedbackItem
}

"The payload for the updateFooterItem mutation"
type UpdateFooterItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  footerItem: FooterItem
}

"The payload for the updateFragment mutation"
type UpdateFragmentPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  fragment: Fragment
}

"The payload for the updateHeroItem mutation"
type UpdateHeroItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  heroItem: HeroItem
}

"The payload for the updateMediaItem mutation"
type UpdateMediaItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The MediaItem object mutation type."
  mediaItem: MediaItem
}

"The payload for the updateMessenger mutation"
type UpdateMessengerPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  messenger: Messenger
}

"The payload for the updateNavigationItem mutation"
type UpdateNavigationItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  navigationItem: NavigationItem
}

"The payload for the updatePage mutation"
type UpdatePagePayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  page: Page
}

"The payload for the UpdatePostFormat mutation"
type UpdatePostFormatPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_format"
  postFormat: PostFormat
}

"The payload for the updatePost mutation"
type UpdatePostPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  post: Post
}

"The payload for the updatePrivacyPolicyItem mutation"
type UpdatePrivacyPolicyItemPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  privacyPolicyItem: PrivacyPolicyItem
}

"The payload for the updateRecruit mutation"
type UpdateRecruitPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  recruit: Recruit
}

"The payload for the updateReview mutation"
type UpdateReviewPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  review: Review
}

"The payload for the updateSettings mutation"
type UpdateSettingsPayload {
  "Update all settings."
  allSettings: Settings
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Update the discussion setting."
  discussionSettings: DiscussionSettings
  "Update the general setting."
  generalSettings: GeneralSettings
  "Update the reading setting."
  readingSettings: ReadingSettings
  "Update the writing setting."
  writingSettings: WritingSettings
}

"The payload for the UpdateSkillCategory mutation"
type UpdateSkillCategoryPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created skill_list"
  skillCategory: SkillCategory
}

"The payload for the updateSkill mutation"
type UpdateSkillPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  skill: Skill
}

"The payload for the updateSocialNetwork mutation"
type UpdateSocialNetworkPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The Post object mutation type."
  socialNetwork: SocialNetwork
}

"The payload for the UpdateTag mutation"
type UpdateTagPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The created post_tag"
  tag: Tag
}

"The payload for the updateUser mutation"
type UpdateUserPayload {
  "If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The User object mutation type."
  user: User
}

"A User object"
type User implements Commenter & DatabaseIdentifier & Node & UniformResourceIdentifiable {
  "Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument."
  avatar(
    "Whether to always show the default image, never the Gravatar. Default false"
    forceDefault: Boolean
    "The rating level of the avatar."
    rating: AvatarRatingEnum
    "The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels."
    size: Int = 96
  ): Avatar
  "User metadata option name. Usually it will be &quot;wp_capabilities&quot;."
  capKey: String
  "A list of capabilities (permissions) granted to the user"
  capabilities: [String]
  "Connection between the User type and the Comment type"
  comments(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: UserToCommentConnectionWhereArgs
  ): UserToCommentConnection
  "Identifies the primary key from the database."
  databaseId: Int!
  "Description of the user."
  description: String
  "Email address of the user. This is equivalent to the WP_User-&gt;user_email property."
  email: String
  "Connection between the User type and the EnqueuedScript type"
  enqueuedScripts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): UserToEnqueuedScriptConnection
  "Connection between the User type and the EnqueuedStylesheet type"
  enqueuedStylesheets(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): UserToEnqueuedStylesheetConnection
  "A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps."
  extraCapabilities: [String]
  "First name of the user. This is equivalent to the WP_User-&gt;user_first_name property."
  firstName: String
  "The globally unique identifier for the user object."
  id: ID!
  "Whether the node is a Content Node"
  isContentNode: Boolean!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "Whether the node is a Term"
  isTermNode: Boolean!
  "Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property."
  lastName: String
  "The preferred language locale set for the user. Value derived from get_user_locale()."
  locale: String
  "Connection between the User type and the mediaItem type"
  mediaItems(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: UserToMediaItemConnectionWhereArgs
  ): UserToMediaItemConnection
  "Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property."
  name: String
  "The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename"
  nicename: String
  "Nickname of the user."
  nickname: String
  "Connection between the User type and the page type"
  pages(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: UserToPageConnectionWhereArgs
  ): UserToPageConnection
  "Connection between the User type and the post type"
  posts(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: UserToPostConnectionWhereArgs
  ): UserToPostConnection
  "The date the user registered or was created. The field follows a full ISO8601 date string format."
  registeredDate: String
  "Connection between the User and Revisions authored by the user"
  revisions(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
    "Arguments for filtering the connection"
    where: UserToContentRevisionUnionConnectionWhereArgs
  ): UserToContentRevisionUnionConnection
  "Connection between the User type and the UserRole type"
  roles(
    "Cursor used along with the \"first\" argument to reference where in the dataset to get data"
    after: String
    "Cursor used along with the \"last\" argument to reference where in the dataset to get data"
    before: String
    "The number of items to return after the referenced \"after\" cursor"
    first: Int
    "The number of items to return before the referenced \"before\" cursor"
    last: Int
  ): UserToUserRoleConnection
  "The Yoast SEO data of a user"
  seo: SEOUser
  "The slug for the user. This field is equivalent to WP_User-&gt;user_nicename"
  slug: String
  "The unique resource identifier path"
  uri: String
  "A website url that is associated with the user."
  url: String
  "The Id of the user. Equivalent to WP_User-&gt;ID"
  userId: Int @deprecated(reason: "Deprecated in favor of the databaseId field")
  "Username for the user. This field is equivalent to WP_User-&gt;user_login."
  username: String
}

"A user role object"
type UserRole implements Node {
  "The capabilities that belong to this role"
  capabilities: [String]
  "The display name of the role"
  displayName: String
  "The globally unique identifier for the user role object."
  id: ID!
  "Whether the object is restricted from the current viewer"
  isRestricted: Boolean
  "The registered name of the role"
  name: String
}

"Connection between the User type and the Comment type"
type UserToCommentConnection {
  "Edges for the UserToCommentConnection connection"
  edges: [UserToCommentConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Comment]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToCommentConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Comment
}

"Connection between the User type and the ContentRevisionUnion type"
type UserToContentRevisionUnionConnection {
  "Edges for the UserToContentRevisionUnionConnection connection"
  edges: [UserToContentRevisionUnionConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [ContentRevisionUnion]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToContentRevisionUnionConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: ContentRevisionUnion
}

"Connection between the User type and the EnqueuedScript type"
type UserToEnqueuedScriptConnection {
  "Edges for the UserToEnqueuedScriptConnection connection"
  edges: [UserToEnqueuedScriptConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedScript]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToEnqueuedScriptConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedScript
}

"Connection between the User type and the EnqueuedStylesheet type"
type UserToEnqueuedStylesheetConnection {
  "Edges for the UserToEnqueuedStylesheetConnection connection"
  edges: [UserToEnqueuedStylesheetConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [EnqueuedStylesheet]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToEnqueuedStylesheetConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: EnqueuedStylesheet
}

"Connection between the User type and the mediaItem type"
type UserToMediaItemConnection {
  "Edges for the UserToMediaItemConnection connection"
  edges: [UserToMediaItemConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [MediaItem]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToMediaItemConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: MediaItem
}

"Connection between the User type and the page type"
type UserToPageConnection {
  "Edges for the UserToPageConnection connection"
  edges: [UserToPageConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Page]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToPageConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Page
}

"Connection between the User type and the post type"
type UserToPostConnection {
  "Edges for the UserToPostConnection connection"
  edges: [UserToPostConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [Post]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToPostConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: Post
}

"Connection between the User type and the UserRole type"
type UserToUserRoleConnection {
  "Edges for the UserToUserRoleConnection connection"
  edges: [UserToUserRoleConnectionEdge]
  "The nodes of the connection, without the edges"
  nodes: [UserRole]
  "Information about pagination in a connection."
  pageInfo: WPPageInfo
}

"An edge in a connection"
type UserToUserRoleConnectionEdge {
  "A cursor for use in pagination"
  cursor: String
  "The item at the end of the edge"
  node: UserRole
}

"Information about pagination in a connection."
type WPPageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "Raw schema for page"
  seo: SEOPostTypePageInfo
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

"The writing setting type"
type WritingSettings {
  "Рубрика для записей по умолчанию."
  defaultCategory: Int
  "Формат записей по умолчанию."
  defaultPostFormat: String
  "Преобразовывать смайлики наподобие :-) и :-P в картинки при показе."
  useSmilies: Boolean
}

"Zip"
type ZipField implements DatabaseIdentifier & FormField & Node {
  "Admin Label"
  adminLabel: String
  "Custom Class Names"
  classes: ZipFieldClasses
  "Creation date"
  createdAt: Int
  "Custom Mask"
  customMask: String
  "Custom Name Attribute"
  customNameAttribute: String
  "The Id of the field"
  databaseId: Int!
  "Default Value"
  default: String
  "Description"
  description: ZipFieldDescription
  "Disable Browser Autocomplete"
  disableBrowserAutocomplete: Boolean
  "Disable Input"
  disableInput: Boolean
  "The Id of the field"
  fieldId: Int
  "Key of the field"
  fieldKey: String
  "Label of the field"
  fieldLabel: String
  "Help Text"
  help: ZipFieldHelp
  "The globally unique identifier of the field"
  id: ID!
  "Limit Input to this Number"
  inputLimitSet: ZipFieldInputLimitSet
  "Field Key"
  key: String
  "Label"
  label: String
  "Label Position"
  labelPos: String
  "manual_key"
  manualKey: String
  "Input Mask"
  mask: String
  "Position order of the field"
  order: Int
  "Parent form id"
  parentId: Int
  "This Field Is Personally Identifiable Data"
  personallyIdentifiable: Boolean
  "Placeholder"
  placeholder: String
  "Required Field"
  required: Boolean
  "type of the field"
  type: String
  "Update date"
  updatedAt: Int
}

"Custom Class Names"
type ZipFieldClasses {
  "Container"
  containerClass: String
  "Element"
  elementClass: String
}

"Description"
type ZipFieldDescription {
  descText: String
}

"Help Text"
type ZipFieldHelp {
  helpText: String
}

"Limit Input to this Number"
type ZipFieldInputLimitSet {
  inputLimit: String
  "Text to Appear After Counter"
  inputLimitMsg: String
  inputLimitType: String
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum AboutItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option"
enum AvatarRatingEnum {
  "Indicates a G level avatar rating level."
  G
  "Indicates a PG level avatar rating level."
  PG
  "Indicates an R level avatar rating level."
  R
  "Indicates an X level avatar rating level."
  X
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum CategoryIdType {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"Options for ordering the connection"
enum CommentsConnectionOrderbyEnum {
  "Order by browser user agent of the commenter."
  COMMENT_AGENT
  "Order by true/false approval of the comment."
  COMMENT_APPROVED
  "Order by name of the comment author."
  COMMENT_AUTHOR
  "Order by e-mail of the comment author."
  COMMENT_AUTHOR_EMAIL
  "Order by IP address of the comment author."
  COMMENT_AUTHOR_IP
  "Order by URL address of the comment author."
  COMMENT_AUTHOR_URL
  "Order by the comment contents."
  COMMENT_CONTENT
  "Order by date/time timestamp of the comment."
  COMMENT_DATE
  "Order by GMT timezone date/time timestamp of the comment."
  COMMENT_DATE_GMT
  "Order by the globally unique identifier for the comment object"
  COMMENT_ID
  "Order by the array list of comment IDs listed in the where clause."
  COMMENT_IN
  "Order by the comment karma score."
  COMMENT_KARMA
  "Order by the comment parent ID."
  COMMENT_PARENT
  "Order by the post object ID."
  COMMENT_POST_ID
  "Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'."
  COMMENT_TYPE
  "Order by the user ID."
  USER_ID
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ContactItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ContentNodeIdTypeEnum {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the URI."
  URI
}

"Allowed Content Types"
enum ContentTypeEnum {
  "The Type of Content object"
  ABOUT_FRAGMENTS
  "The Type of Content object"
  ATTACHMENT
  "The Type of Content object"
  CONTACTS_FRAGMENT
  "The Type of Content object"
  FEEDBACK
  "The Type of Content object"
  FOOTER_FRAGMENTS
  "The Type of Content object"
  FRAGMENT
  "The Type of Content object"
  HERO_FRAGMENTS
  "The Type of Content object"
  MESSENGERS
  "The Type of Content object"
  NAVIGATION
  "The Type of Content object"
  PAGE
  "The Type of Content object"
  POST
  "The Type of Content object"
  PRIVACY_POLICY
  "The Type of Content object"
  RECRUIT
  "The Type of Content object"
  REVIEW
  "The Type of Content object"
  SKILL
  "The Type of Content object"
  SOCIAL_NETWORKS
}

"The Type of Identifier used to fetch a single Content Type node. To be used along with the \"id\" field. Default is \"ID\"."
enum ContentTypeIdTypeEnum {
  "The globally unique ID"
  ID
  "The name of the content type."
  NAME
}

"Allowed Content Types of the Category taxonomy."
enum ContentTypesOfCategoryEnum {
  "The Type of Content object"
  POST
}

"Allowed Content Types of the PostFormat taxonomy."
enum ContentTypesOfPostFormatEnum {
  "The Type of Content object"
  POST
  "The Type of Content object"
  REVIEW
  "The Type of Content object"
  SKILL
}

"Allowed Content Types of the SkillCategory taxonomy."
enum ContentTypesOfSkillCategoryEnum {
  "The Type of Content object"
  SKILL
}

"Allowed Content Types of the Tag taxonomy."
enum ContentTypesOfTagEnum {
  "The Type of Content object"
  POST
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum FeedbackItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum FooterItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single Form. Default is ID."
enum FormIdTypeEnum {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum FragmentIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum HeroItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"Enum of all available language codes"
enum LanguageCodeEnum {
  EN
  RU
  "The default locale of the site"
  RU_RU
}

"Filter item by specific language, default language or list all languages"
enum LanguageCodeFilterEnum {
  ALL
  DEFAULT
  EN
  RU
  "The default locale of the site"
  RU_RU
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum MediaItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a media item by its source url"
  SOURCE_URL
  "Identify a resource by the URI."
  URI
}

"The size of the media item object."
enum MediaItemSizeEnum {
  "MediaItem with the large size"
  LARGE
  "MediaItem with the medium size"
  MEDIUM
  "MediaItem with the medium_large size"
  MEDIUM_LARGE
  "MediaItem with the thumbnail size"
  THUMBNAIL
  "MediaItem with the 1536x1536 size"
  _1536X1536
  "MediaItem with the 2048x2048 size"
  _2048X2048
}

"The status of the media item object."
enum MediaItemStatusEnum {
  "Objects with the auto-draft status"
  AUTO_DRAFT
  "Objects with the inherit status"
  INHERIT
  "Objects with the private status"
  PRIVATE
  "Objects with the trash status"
  TRASH
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuItemNodeIdTypeEnum {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
}

"Registered menu locations"
enum MenuLocationEnum {
  "Empty menu location"
  EMPTY
}

"The Type of Identifier used to fetch a single node. Default is \"ID\". To be used along with the \"id\" field."
enum MenuNodeIdTypeEnum {
  "Identify a menu node by the Database ID."
  DATABASE_ID
  "Identify a menu node by the (hashed) Global ID."
  ID
  "Identify a menu node by it's name"
  NAME
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum MessengerIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The MimeType of the object"
enum MimeTypeEnum {
  "MimeType application/java"
  APPLICATION_JAVA
  "MimeType application/msword"
  APPLICATION_MSWORD
  "MimeType application/octet-stream"
  APPLICATION_OCTET_STREAM
  "MimeType application/onenote"
  APPLICATION_ONENOTE
  "MimeType application/oxps"
  APPLICATION_OXPS
  "MimeType application/pdf"
  APPLICATION_PDF
  "MimeType application/rar"
  APPLICATION_RAR
  "MimeType application/rtf"
  APPLICATION_RTF
  "MimeType application/ttaf+xml"
  APPLICATION_TTAF_XML
  "MimeType application/vnd.apple.keynote"
  APPLICATION_VND_APPLE_KEYNOTE
  "MimeType application/vnd.apple.numbers"
  APPLICATION_VND_APPLE_NUMBERS
  "MimeType application/vnd.apple.pages"
  APPLICATION_VND_APPLE_PAGES
  "MimeType application/vnd.ms-access"
  APPLICATION_VND_MS_ACCESS
  "MimeType application/vnd.ms-excel"
  APPLICATION_VND_MS_EXCEL
  "MimeType application/vnd.ms-excel.addin.macroEnabled.12"
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
  "MimeType application/vnd.ms-excel.sheet.binary.macroEnabled.12"
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
  "MimeType application/vnd.ms-excel.sheet.macroEnabled.12"
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
  "MimeType application/vnd.ms-excel.template.macroEnabled.12"
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
  "MimeType application/vnd.ms-powerpoint"
  APPLICATION_VND_MS_POWERPOINT
  "MimeType application/vnd.ms-powerpoint.addin.macroEnabled.12"
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
  "MimeType application/vnd.ms-powerpoint.presentation.macroEnabled.12"
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
  "MimeType application/vnd.ms-powerpoint.slideshow.macroEnabled.12"
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
  "MimeType application/vnd.ms-powerpoint.slide.macroEnabled.12"
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
  "MimeType application/vnd.ms-powerpoint.template.macroEnabled.12"
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
  "MimeType application/vnd.ms-project"
  APPLICATION_VND_MS_PROJECT
  "MimeType application/vnd.ms-word.document.macroEnabled.12"
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
  "MimeType application/vnd.ms-word.template.macroEnabled.12"
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
  "MimeType application/vnd.ms-write"
  APPLICATION_VND_MS_WRITE
  "MimeType application/vnd.ms-xpsdocument"
  APPLICATION_VND_MS_XPSDOCUMENT
  "MimeType application/vnd.oasis.opendocument.chart"
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
  "MimeType application/vnd.oasis.opendocument.database"
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
  "MimeType application/vnd.oasis.opendocument.formula"
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
  "MimeType application/vnd.oasis.opendocument.graphics"
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
  "MimeType application/vnd.oasis.opendocument.presentation"
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
  "MimeType application/vnd.oasis.opendocument.spreadsheet"
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
  "MimeType application/vnd.oasis.opendocument.text"
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
  "MimeType application/vnd.openxmlformats-officedocument.presentationml.presentation"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
  "MimeType application/vnd.openxmlformats-officedocument.presentationml.slide"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
  "MimeType application/vnd.openxmlformats-officedocument.presentationml.slideshow"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
  "MimeType application/vnd.openxmlformats-officedocument.presentationml.template"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
  "MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
  "MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.template"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
  "MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.document"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
  "MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.template"
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
  "MimeType application/wordperfect"
  APPLICATION_WORDPERFECT
  "MimeType application/x-7z-compressed"
  APPLICATION_X_7Z_COMPRESSED
  "MimeType application/x-gzip"
  APPLICATION_X_GZIP
  "MimeType application/x-tar"
  APPLICATION_X_TAR
  "MimeType application/zip"
  APPLICATION_ZIP
  "MimeType audio/aac"
  AUDIO_AAC
  "MimeType audio/flac"
  AUDIO_FLAC
  "MimeType audio/midi"
  AUDIO_MIDI
  "MimeType audio/mpeg"
  AUDIO_MPEG
  "MimeType audio/ogg"
  AUDIO_OGG
  "MimeType audio/wav"
  AUDIO_WAV
  "MimeType audio/x-matroska"
  AUDIO_X_MATROSKA
  "MimeType audio/x-ms-wax"
  AUDIO_X_MS_WAX
  "MimeType audio/x-ms-wma"
  AUDIO_X_MS_WMA
  "MimeType audio/x-realaudio"
  AUDIO_X_REALAUDIO
  "MimeType image/bmp"
  IMAGE_BMP
  "MimeType image/gif"
  IMAGE_GIF
  "MimeType image/heic"
  IMAGE_HEIC
  "MimeType image/jpeg"
  IMAGE_JPEG
  "MimeType image/png"
  IMAGE_PNG
  "MimeType image/svg+xml"
  IMAGE_SVG_XML
  "MimeType image/tiff"
  IMAGE_TIFF
  "MimeType image/webp"
  IMAGE_WEBP
  "MimeType image/x-icon"
  IMAGE_X_ICON
  "MimeType text/calendar"
  TEXT_CALENDAR
  "MimeType text/css"
  TEXT_CSS
  "MimeType text/csv"
  TEXT_CSV
  "MimeType text/plain"
  TEXT_PLAIN
  "MimeType text/richtext"
  TEXT_RICHTEXT
  "MimeType text/tab-separated-values"
  TEXT_TAB_SEPARATED_VALUES
  "MimeType text/vtt"
  TEXT_VTT
  "MimeType video/3gpp"
  VIDEO_3GPP
  "MimeType video/3gpp2"
  VIDEO_3GPP2
  "MimeType video/avi"
  VIDEO_AVI
  "MimeType video/divx"
  VIDEO_DIVX
  "MimeType video/mp4"
  VIDEO_MP4
  "MimeType video/mpeg"
  VIDEO_MPEG
  "MimeType video/ogg"
  VIDEO_OGG
  "MimeType video/quicktime"
  VIDEO_QUICKTIME
  "MimeType video/webm"
  VIDEO_WEBM
  "MimeType video/x-flv"
  VIDEO_X_FLV
  "MimeType video/x-matroska"
  VIDEO_X_MATROSKA
  "MimeType video/x-ms-asf"
  VIDEO_X_MS_ASF
  "MimeType video/x-ms-wm"
  VIDEO_X_MS_WM
  "MimeType video/x-ms-wmv"
  VIDEO_X_MS_WMV
  "MimeType video/x-ms-wmx"
  VIDEO_X_MS_WMX
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum NavigationItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The cardinality of the connection order"
enum OrderEnum {
  "Sort the query result set in an ascending order"
  ASC
  "Sort the query result set in a descending order"
  DESC
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PageIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostFormatIdType {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PostIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The format of post field data."
enum PostObjectFieldFormatEnum {
  "Provide the field value directly from database"
  RAW
  "Apply the default WordPress rendering"
  RENDERED
}

"The column to use when filtering by date"
enum PostObjectsConnectionDateColumnEnum {
  "The date the comment was created in local time."
  DATE
  "The most recent modification date of the comment."
  MODIFIED
}

"Field to order the connection by"
enum PostObjectsConnectionOrderbyEnum {
  "Order by author"
  AUTHOR
  "Order by the number of comments it has acquired"
  COMMENT_COUNT
  "Order by publish date"
  DATE
  "Preserve the ID order given in the IN array"
  IN
  "Order by the menu order value"
  MENU_ORDER
  "Order by last modified date"
  MODIFIED
  "Preserve slug order given in the NAME_IN array"
  NAME_IN
  "Order by parent ID"
  PARENT
  "Order by slug"
  SLUG
  "Order by title"
  TITLE
}

"The status of the object."
enum PostStatusEnum {
  "Objects with the acf-disabled status"
  ACF_DISABLED
  "Objects with the auto-draft status"
  AUTO_DRAFT
  "Objects with the draft status"
  DRAFT
  "Objects with the future status"
  FUTURE
  "Objects with the inherit status"
  INHERIT
  "Objects with the pending status"
  PENDING
  "Objects with the private status"
  PRIVATE
  "Objects with the publish status"
  PUBLISH
  "Objects with the request-completed status"
  REQUEST_COMPLETED
  "Objects with the request-confirmed status"
  REQUEST_CONFIRMED
  "Objects with the request-failed status"
  REQUEST_FAILED
  "Objects with the request-pending status"
  REQUEST_PENDING
  "Objects with the trash status"
  TRASH
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum PrivacyPolicyItemIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum RecruitIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The logical relation between each item in the array when there are more than one."
enum RelationEnum {
  "The logical AND condition returns true if both operands are true, otherwise, it returns false."
  AND
  "The logical OR condition returns false if both operands are false, otherwise, it returns true."
  OR
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum ReviewIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"Types of cards"
enum SEOCardType {
  summary
  summary_large_image
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum SkillCategoryIdType {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum SkillIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum SocialNetworkIdType {
  "Identify a resource by the Database ID."
  DATABASE_ID
  "Identify a resource by the (hashed) Global ID."
  ID
  "Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier."
  SLUG
  "Identify a resource by the URI."
  URI
}

"The Type of Identifier used to fetch a single resource. Default is ID."
enum TagIdType {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"Allowed taxonomies"
enum TaxonomyEnum {
  "Taxonomy enum category"
  CATEGORY
  "Taxonomy enum post_format"
  POSTFORMAT
  "Taxonomy enum skill_list"
  SKILLCATEGORY
  "Taxonomy enum post_tag"
  TAG
}

"The Type of Identifier used to fetch a single Taxonomy node. To be used along with the \"id\" field. Default is \"ID\"."
enum TaxonomyIdTypeEnum {
  "The globally unique ID"
  ID
  "The name of the taxonomy"
  NAME
}

"The Type of Identifier used to fetch a single resource. Default is \"ID\". To be used along with the \"id\" field."
enum TermNodeIdTypeEnum {
  "The Database ID for the node"
  DATABASE_ID
  "The hashed Global ID"
  ID
  "The name of the node"
  NAME
  "Url friendly name of the node"
  SLUG
  "The URI for the node"
  URI
}

"Options for ordering the connection by"
enum TermObjectsConnectionOrderbyEnum {
  "Order the connection by item count."
  COUNT
  "Order the connection by description."
  DESCRIPTION
  "Order the connection by name."
  NAME
  "Order the connection by slug."
  SLUG
  "Order the connection by term group."
  TERM_GROUP
  "Order the connection by term id."
  TERM_ID
  "Order the connection by term order."
  TERM_ORDER
}

"Available timezones"
enum TimezoneEnum {
  "Абиджан"
  AFRICA_ABIDJAN
  "Аккра"
  AFRICA_ACCRA
  "Аддис-Абеба"
  AFRICA_ADDIS_ABABA
  "Алжир"
  AFRICA_ALGIERS
  "Асмэра"
  AFRICA_ASMARA
  "Бамако"
  AFRICA_BAMAKO
  "Банги"
  AFRICA_BANGUI
  "Банжул"
  AFRICA_BANJUL
  "Бисау"
  AFRICA_BISSAU
  "Блантайр"
  AFRICA_BLANTYRE
  "Браззавиль"
  AFRICA_BRAZZAVILLE
  "Бужумбура"
  AFRICA_BUJUMBURA
  "Каир"
  AFRICA_CAIRO
  "Касабланка"
  AFRICA_CASABLANCA
  "Сеута"
  AFRICA_CEUTA
  "Конакри"
  AFRICA_CONAKRY
  "Дакар"
  AFRICA_DAKAR
  "Дар-эс-Салам"
  AFRICA_DAR_ES_SALAAM
  "Джибути"
  AFRICA_DJIBOUTI
  "Дуала"
  AFRICA_DOUALA
  "Эль-Аюн"
  AFRICA_EL_AAIUN
  "Фритаун"
  AFRICA_FREETOWN
  "Габороне"
  AFRICA_GABORONE
  "Хараре"
  AFRICA_HARARE
  "Йоханнесбург"
  AFRICA_JOHANNESBURG
  "Джуба"
  AFRICA_JUBA
  "Кампала"
  AFRICA_KAMPALA
  "Хартум"
  AFRICA_KHARTOUM
  "Кигали"
  AFRICA_KIGALI
  "Киншаса"
  AFRICA_KINSHASA
  "Лагос"
  AFRICA_LAGOS
  "Либревиль"
  AFRICA_LIBREVILLE
  "Ломе"
  AFRICA_LOME
  "Луанда"
  AFRICA_LUANDA
  "Лубумбаши"
  AFRICA_LUBUMBASHI
  "Лусака"
  AFRICA_LUSAKA
  "Малабо"
  AFRICA_MALABO
  "Мапуту"
  AFRICA_MAPUTO
  "Масеру"
  AFRICA_MASERU
  "Мбабане"
  AFRICA_MBABANE
  "Могадишо"
  AFRICA_MOGADISHU
  "Монровия"
  AFRICA_MONROVIA
  "Найроби"
  AFRICA_NAIROBI
  "Нджамена"
  AFRICA_NDJAMENA
  "Ниамей"
  AFRICA_NIAMEY
  "Нуакшот"
  AFRICA_NOUAKCHOTT
  "Уагадугу"
  AFRICA_OUAGADOUGOU
  "Порто-Ново"
  AFRICA_PORTO_NOVO
  "Сан-Томе"
  AFRICA_SAO_TOME
  "Триполи"
  AFRICA_TRIPOLI
  "Тунис"
  AFRICA_TUNIS
  "Виндхук"
  AFRICA_WINDHOEK
  "Адак"
  AMERICA_ADAK
  "Анкоридж"
  AMERICA_ANCHORAGE
  "Ангилья"
  AMERICA_ANGUILLA
  "Антигуа"
  AMERICA_ANTIGUA
  "Арагуаина"
  AMERICA_ARAGUAINA
  "Аргентина - Буэнос-Айрес"
  AMERICA_ARGENTINA_BUENOS_AIRES
  "Аргентина - Катамарка"
  AMERICA_ARGENTINA_CATAMARCA
  "Аргентина - Кордова"
  AMERICA_ARGENTINA_CORDOBA
  "Аргентина - Жужуй"
  AMERICA_ARGENTINA_JUJUY
  "Аргентина - Ла-Риоха"
  AMERICA_ARGENTINA_LA_RIOJA
  "Аргентина - Мендоса"
  AMERICA_ARGENTINA_MENDOZA
  "Аргентина - Рио-Гальегос"
  AMERICA_ARGENTINA_RIO_GALLEGOS
  "Аргентина - Сальта"
  AMERICA_ARGENTINA_SALTA
  "Аргентина - Сан-Хуан"
  AMERICA_ARGENTINA_SAN_JUAN
  "Аргентина - Сан-Луис"
  AMERICA_ARGENTINA_SAN_LUIS
  "Аргентина - Тукуман"
  AMERICA_ARGENTINA_TUCUMAN
  "Аргентина - Ушуайя"
  AMERICA_ARGENTINA_USHUAIA
  "Аруба"
  AMERICA_ARUBA
  "Асунсьон"
  AMERICA_ASUNCION
  "Атикокан"
  AMERICA_ATIKOKAN
  "Баия"
  AMERICA_BAHIA
  "Баия-де-Бандерас"
  AMERICA_BAHIA_BANDERAS
  "Барбадос"
  AMERICA_BARBADOS
  "Белем"
  AMERICA_BELEM
  "Белиз"
  AMERICA_BELIZE
  "Бланк-Саблон"
  AMERICA_BLANC_SABLON
  "Боа-Виста"
  AMERICA_BOA_VISTA
  "Богота"
  AMERICA_BOGOTA
  "Бойсе"
  AMERICA_BOISE
  "Кеймбридж-Бей"
  AMERICA_CAMBRIDGE_BAY
  "Кампу-Гранди"
  AMERICA_CAMPO_GRANDE
  "Канкун"
  AMERICA_CANCUN
  "Каракас"
  AMERICA_CARACAS
  "Кайенна"
  AMERICA_CAYENNE
  "Кайман"
  AMERICA_CAYMAN
  "Чикаго"
  AMERICA_CHICAGO
  "Чиуауа"
  AMERICA_CHIHUAHUA
  "Коста-Рика"
  AMERICA_COSTA_RICA
  "Крестон"
  AMERICA_CRESTON
  "Куяба"
  AMERICA_CUIABA
  "Кюрасао"
  AMERICA_CURACAO
  "Данмарксхавн"
  AMERICA_DANMARKSHAVN
  "Доусон"
  AMERICA_DAWSON
  "Досон-Крик"
  AMERICA_DAWSON_CREEK
  "Денвер"
  AMERICA_DENVER
  "Детройт"
  AMERICA_DETROIT
  "Доминика"
  AMERICA_DOMINICA
  "Эдмонтон"
  AMERICA_EDMONTON
  "Эйрунепе"
  AMERICA_EIRUNEPE
  "Сальвадор"
  AMERICA_EL_SALVADOR
  "Форталеза"
  AMERICA_FORTALEZA
  "Форт-Нельсон"
  AMERICA_FORT_NELSON
  "Глейс-Бей"
  AMERICA_GLACE_BAY
  "Гус-Бей"
  AMERICA_GOOSE_BAY
  "Гранд-Терк"
  AMERICA_GRAND_TURK
  "Гренада"
  AMERICA_GRENADA
  "Гваделупа"
  AMERICA_GUADELOUPE
  "Гватемала"
  AMERICA_GUATEMALA
  "Гуаякиль"
  AMERICA_GUAYAQUIL
  "Гайана"
  AMERICA_GUYANA
  "Галифакс"
  AMERICA_HALIFAX
  "Гавана"
  AMERICA_HAVANA
  "Эрмосильо"
  AMERICA_HERMOSILLO
  "Индиана - Индианаполис"
  AMERICA_INDIANA_INDIANAPOLIS
  "Индиана - Нокс"
  AMERICA_INDIANA_KNOX
  "Индиана - Маренго"
  AMERICA_INDIANA_MARENGO
  "Индиана - Петербург"
  AMERICA_INDIANA_PETERSBURG
  "Индиана - Телл-Сити"
  AMERICA_INDIANA_TELL_CITY
  "Индиана - Вевей"
  AMERICA_INDIANA_VEVAY
  "Индиана - Венсен"
  AMERICA_INDIANA_VINCENNES
  "Индиана - Винамак"
  AMERICA_INDIANA_WINAMAC
  "Инувик"
  AMERICA_INUVIK
  "Икалуит"
  AMERICA_IQALUIT
  "Ямайка"
  AMERICA_JAMAICA
  "Джуно"
  AMERICA_JUNEAU
  "Кентукки - Луисвилл"
  AMERICA_KENTUCKY_LOUISVILLE
  "Кентукки - Монтичелло"
  AMERICA_KENTUCKY_MONTICELLO
  "Кралендейк"
  AMERICA_KRALENDIJK
  "Ла-Пас"
  AMERICA_LA_PAZ
  "Лима"
  AMERICA_LIMA
  "Лос-Анджелес"
  AMERICA_LOS_ANGELES
  "Лоуэр-Принсес"
  AMERICA_LOWER_PRINCES
  "Масейо"
  AMERICA_MACEIO
  "Манагуа"
  AMERICA_MANAGUA
  "Манаус"
  AMERICA_MANAUS
  "Мариго"
  AMERICA_MARIGOT
  "Мартиника"
  AMERICA_MARTINIQUE
  "Матаморос"
  AMERICA_MATAMOROS
  "Масатлан"
  AMERICA_MAZATLAN
  "Меномини"
  AMERICA_MENOMINEE
  "Мерида"
  AMERICA_MERIDA
  "Метлакатла"
  AMERICA_METLAKATLA
  "Мехико"
  AMERICA_MEXICO_CITY
  "Микелон"
  AMERICA_MIQUELON
  "Монктон"
  AMERICA_MONCTON
  "Монтеррей"
  AMERICA_MONTERREY
  "Монтевидео"
  AMERICA_MONTEVIDEO
  "Монсеррат"
  AMERICA_MONTSERRAT
  "Нассау"
  AMERICA_NASSAU
  "Нью-Йорк"
  AMERICA_NEW_YORK
  "Нипигон"
  AMERICA_NIPIGON
  "Ном"
  AMERICA_NOME
  "Норонья"
  AMERICA_NORONHA
  "Северная Дакота - Бьюла"
  AMERICA_NORTH_DAKOTA_BEULAH
  "Северная Дакота - Центр"
  AMERICA_NORTH_DAKOTA_CENTER
  "Северная Дакота - Нью-Салем"
  AMERICA_NORTH_DAKOTA_NEW_SALEM
  "Нуук"
  AMERICA_NUUK
  "Охинага"
  AMERICA_OJINAGA
  "Панама"
  AMERICA_PANAMA
  "Пангниртунг"
  AMERICA_PANGNIRTUNG
  "Парамарибо"
  AMERICA_PARAMARIBO
  "Феникс"
  AMERICA_PHOENIX
  "Порту-Велью"
  AMERICA_PORTO_VELHO
  "Порт-о-Пренс"
  AMERICA_PORT_AU_PRINCE
  "Порт-оф-Спейн"
  AMERICA_PORT_OF_SPAIN
  "Пуэрто-Рико"
  AMERICA_PUERTO_RICO
  "Пунта-Аренас"
  AMERICA_PUNTA_ARENAS
  "Рейни-Ривер"
  AMERICA_RAINY_RIVER
  "Ранкин-Инлет"
  AMERICA_RANKIN_INLET
  "Ресифи"
  AMERICA_RECIFE
  "Реджайна"
  AMERICA_REGINA
  "Резольют"
  AMERICA_RESOLUTE
  "Рио-Бранко"
  AMERICA_RIO_BRANCO
  "Сантарен"
  AMERICA_SANTAREM
  "Сантьяго"
  AMERICA_SANTIAGO
  "Санто-Доминго"
  AMERICA_SANTO_DOMINGO
  "Сан-Паулу"
  AMERICA_SAO_PAULO
  "Скорсби"
  AMERICA_SCORESBYSUND
  "Ситка"
  AMERICA_SITKA
  "Сент-Бартелеми"
  AMERICA_ST_BARTHELEMY
  "Сент-Джонс"
  AMERICA_ST_JOHNS
  "Сент-Китс"
  AMERICA_ST_KITTS
  "Сент-Люсия"
  AMERICA_ST_LUCIA
  "Сент-Томас"
  AMERICA_ST_THOMAS
  "Сент-Винсент"
  AMERICA_ST_VINCENT
  "Свифт-Каррент"
  AMERICA_SWIFT_CURRENT
  "Тегусигальпа"
  AMERICA_TEGUCIGALPA
  "Туле"
  AMERICA_THULE
  "Тандер-Бей"
  AMERICA_THUNDER_BAY
  "Тихуана"
  AMERICA_TIJUANA
  "Торонто"
  AMERICA_TORONTO
  "Тортола"
  AMERICA_TORTOLA
  "Ванкувер"
  AMERICA_VANCOUVER
  "Уайтхорс"
  AMERICA_WHITEHORSE
  "Виннипег"
  AMERICA_WINNIPEG
  "Якутат"
  AMERICA_YAKUTAT
  "Йеллоунайф"
  AMERICA_YELLOWKNIFE
  "Кейси"
  ANTARCTICA_CASEY
  "Дэвис"
  ANTARCTICA_DAVIS
  "Дюмон-Дюрвиль"
  ANTARCTICA_DUMONTDURVILLE
  "Маккуори"
  ANTARCTICA_MACQUARIE
  "Моусон"
  ANTARCTICA_MAWSON
  "Мак-Мердо"
  ANTARCTICA_MCMURDO
  "Палмер"
  ANTARCTICA_PALMER
  "Ротера"
  ANTARCTICA_ROTHERA
  "Сиова"
  ANTARCTICA_SYOWA
  "Тролль"
  ANTARCTICA_TROLL
  "Восток"
  ANTARCTICA_VOSTOK
  "Лонгйир"
  ARCTIC_LONGYEARBYEN
  "Аден"
  ASIA_ADEN
  "Алматы"
  ASIA_ALMATY
  "Амман"
  ASIA_AMMAN
  "Анадырь"
  ASIA_ANADYR
  "Актау"
  ASIA_AQTAU
  "Актобе"
  ASIA_AQTOBE
  "Ашхабад"
  ASIA_ASHGABAT
  "Атырау"
  ASIA_ATYRAU
  "Багдад"
  ASIA_BAGHDAD
  "Бахрейн"
  ASIA_BAHRAIN
  "Баку"
  ASIA_BAKU
  "Бангкок"
  ASIA_BANGKOK
  "Барнаул"
  ASIA_BARNAUL
  "Бейрут"
  ASIA_BEIRUT
  "Бишкек"
  ASIA_BISHKEK
  "Бруней"
  ASIA_BRUNEI
  "Чита"
  ASIA_CHITA
  "Чойбалсан"
  ASIA_CHOIBALSAN
  "Коломбо"
  ASIA_COLOMBO
  "Дамаск"
  ASIA_DAMASCUS
  "Дакка"
  ASIA_DHAKA
  "Дили"
  ASIA_DILI
  "Дубай"
  ASIA_DUBAI
  "Душанбе"
  ASIA_DUSHANBE
  "Фамагуста"
  ASIA_FAMAGUSTA
  "Газа"
  ASIA_GAZA
  "Хеврон"
  ASIA_HEBRON
  "Гонконг"
  ASIA_HONG_KONG
  "Ховд"
  ASIA_HOVD
  "Хошимин"
  ASIA_HO_CHI_MINH
  "Иркутск"
  ASIA_IRKUTSK
  "Джакарта"
  ASIA_JAKARTA
  "Джаяпура"
  ASIA_JAYAPURA
  "Иерусалим"
  ASIA_JERUSALEM
  "Кабул"
  ASIA_KABUL
  "Камчатка"
  ASIA_KAMCHATKA
  "Карачи"
  ASIA_KARACHI
  "Катманду"
  ASIA_KATHMANDU
  "Хандыга"
  ASIA_KHANDYGA
  "Калькутта"
  ASIA_KOLKATA
  "Красноярск"
  ASIA_KRASNOYARSK
  "Куала-Лумпур"
  ASIA_KUALA_LUMPUR
  "Кучинг"
  ASIA_KUCHING
  "Кувейт"
  ASIA_KUWAIT
  "Макао"
  ASIA_MACAU
  "Магадан"
  ASIA_MAGADAN
  "Макассар"
  ASIA_MAKASSAR
  "Манила"
  ASIA_MANILA
  "Маскат"
  ASIA_MUSCAT
  "Никосия"
  ASIA_NICOSIA
  "Новокузнецк"
  ASIA_NOVOKUZNETSK
  "Новосибирск"
  ASIA_NOVOSIBIRSK
  "Омск"
  ASIA_OMSK
  "Орал"
  ASIA_ORAL
  "Пномпень"
  ASIA_PHNOM_PENH
  "Понтианаке"
  ASIA_PONTIANAK
  "Пхеньян"
  ASIA_PYONGYANG
  "Катар"
  ASIA_QATAR
  "Костанай"
  ASIA_QOSTANAY
  "Кызылорда"
  ASIA_QYZYLORDA
  "Эр-Рияд"
  ASIA_RIYADH
  "Сахалин"
  ASIA_SAKHALIN
  "Самарканд"
  ASIA_SAMARKAND
  "Сеул"
  ASIA_SEOUL
  "Шанхай"
  ASIA_SHANGHAI
  "Сингапур"
  ASIA_SINGAPORE
  "Среднеколымск"
  ASIA_SREDNEKOLYMSK
  "Тайбэй"
  ASIA_TAIPEI
  "Ташкент"
  ASIA_TASHKENT
  "Тбилиси"
  ASIA_TBILISI
  "Тегеран"
  ASIA_TEHRAN
  "Тхимпху"
  ASIA_THIMPHU
  "Токио"
  ASIA_TOKYO
  "Томск"
  ASIA_TOMSK
  "Улан-Батор"
  ASIA_ULAANBAATAR
  "Урумчи"
  ASIA_URUMQI
  "Усть-Нера"
  ASIA_UST_NERA
  "Вьентьян"
  ASIA_VIENTIANE
  "Владивосток"
  ASIA_VLADIVOSTOK
  "Якутск"
  ASIA_YAKUTSK
  "Янгон"
  ASIA_YANGON
  "Екатеринбург"
  ASIA_YEKATERINBURG
  "Ереван"
  ASIA_YEREVAN
  "Азорские острова"
  ATLANTIC_AZORES
  "Бермудские острова"
  ATLANTIC_BERMUDA
  "Канары"
  ATLANTIC_CANARY
  "Кабо-Верде"
  ATLANTIC_CAPE_VERDE
  "Фарер"
  ATLANTIC_FAROE
  "Мадейра"
  ATLANTIC_MADEIRA
  "Рейкьявик"
  ATLANTIC_REYKJAVIK
  "Южная Георгия"
  ATLANTIC_SOUTH_GEORGIA
  "Стэнли"
  ATLANTIC_STANLEY
  "Остров св. Елены"
  ATLANTIC_ST_HELENA
  "Аделаида"
  AUSTRALIA_ADELAIDE
  "Брисбен"
  AUSTRALIA_BRISBANE
  "Броукен-Хил"
  AUSTRALIA_BROKEN_HILL
  "Дарвин"
  AUSTRALIA_DARWIN
  "Эукла"
  AUSTRALIA_EUCLA
  "Хобарт"
  AUSTRALIA_HOBART
  "Линдеман"
  AUSTRALIA_LINDEMAN
  "Лорд-Хау"
  AUSTRALIA_LORD_HOWE
  "Мельбурн"
  AUSTRALIA_MELBOURNE
  "Перт"
  AUSTRALIA_PERTH
  "Сидней"
  AUSTRALIA_SYDNEY
  "Амстердам"
  EUROPE_AMSTERDAM
  "Андорра"
  EUROPE_ANDORRA
  "Астрахань"
  EUROPE_ASTRAKHAN
  "Афины"
  EUROPE_ATHENS
  "Белград"
  EUROPE_BELGRADE
  "Берлин"
  EUROPE_BERLIN
  "Братислава"
  EUROPE_BRATISLAVA
  "Брюссель"
  EUROPE_BRUSSELS
  "Бухарест"
  EUROPE_BUCHAREST
  "Будапешт"
  EUROPE_BUDAPEST
  "Бюзинген"
  EUROPE_BUSINGEN
  "Кишинёв"
  EUROPE_CHISINAU
  "Копенгаген"
  EUROPE_COPENHAGEN
  "Дублин"
  EUROPE_DUBLIN
  "Гибралтар"
  EUROPE_GIBRALTAR
  "Гернси"
  EUROPE_GUERNSEY
  "Хельсинки"
  EUROPE_HELSINKI
  "Остров Мэн"
  EUROPE_ISLE_OF_MAN
  "Стамбул"
  EUROPE_ISTANBUL
  "Джерси"
  EUROPE_JERSEY
  "Калининград"
  EUROPE_KALININGRAD
  "Киев"
  EUROPE_KIEV
  "Киров"
  EUROPE_KIROV
  "Лиссабон"
  EUROPE_LISBON
  "Любляна"
  EUROPE_LJUBLJANA
  "Лондон"
  EUROPE_LONDON
  "Люксембург"
  EUROPE_LUXEMBOURG
  "Мадрид"
  EUROPE_MADRID
  "Мальта"
  EUROPE_MALTA
  "Мариехамн"
  EUROPE_MARIEHAMN
  "Минск"
  EUROPE_MINSK
  "Монако"
  EUROPE_MONACO
  "Москва"
  EUROPE_MOSCOW
  "Осло"
  EUROPE_OSLO
  "Париж"
  EUROPE_PARIS
  "Подгорица"
  EUROPE_PODGORICA
  "Прага"
  EUROPE_PRAGUE
  "Рига"
  EUROPE_RIGA
  "Рим"
  EUROPE_ROME
  "Самара"
  EUROPE_SAMARA
  "Сан-Марино"
  EUROPE_SAN_MARINO
  "Сараево"
  EUROPE_SARAJEVO
  "Саратов"
  EUROPE_SARATOV
  "Симферополь"
  EUROPE_SIMFEROPOL
  "Скопье"
  EUROPE_SKOPJE
  "София"
  EUROPE_SOFIA
  "Стокгольм"
  EUROPE_STOCKHOLM
  "Таллин"
  EUROPE_TALLINN
  "Тирана"
  EUROPE_TIRANE
  "Ульяновск"
  EUROPE_ULYANOVSK
  "Ужгород"
  EUROPE_UZHGOROD
  "Вадуц"
  EUROPE_VADUZ
  "Ватикан"
  EUROPE_VATICAN
  "Вена"
  EUROPE_VIENNA
  "Вильнюс"
  EUROPE_VILNIUS
  "Волгоград"
  EUROPE_VOLGOGRAD
  "Варшава"
  EUROPE_WARSAW
  "Загреб"
  EUROPE_ZAGREB
  "Запорожье"
  EUROPE_ZAPOROZHYE
  "Цюрих"
  EUROPE_ZURICH
  "Антананариву"
  INDIAN_ANTANANARIVO
  "Чагос"
  INDIAN_CHAGOS
  "Остров Рождества"
  INDIAN_CHRISTMAS
  "Кокосовые острова"
  INDIAN_COCOS
  "Коморские острова"
  INDIAN_COMORO
  "Кергелен"
  INDIAN_KERGUELEN
  "Маэ"
  INDIAN_MAHE
  "Мальдивы"
  INDIAN_MALDIVES
  "Маврикий"
  INDIAN_MAURITIUS
  "Майотта"
  INDIAN_MAYOTTE
  "Реюньон"
  INDIAN_REUNION
  "Апия"
  PACIFIC_APIA
  "Окленд"
  PACIFIC_AUCKLAND
  "Бугенвиль"
  PACIFIC_BOUGAINVILLE
  "Чатэм"
  PACIFIC_CHATHAM
  "Трук"
  PACIFIC_CHUUK
  "Остров Пасхи"
  PACIFIC_EASTER
  "Эфате"
  PACIFIC_EFATE
  "Факаофо"
  PACIFIC_FAKAOFO
  "Фиджи"
  PACIFIC_FIJI
  "Фунафути"
  PACIFIC_FUNAFUTI
  "Галапагос"
  PACIFIC_GALAPAGOS
  "Гамбье"
  PACIFIC_GAMBIER
  "Гуадалканал"
  PACIFIC_GUADALCANAL
  "Гуам"
  PACIFIC_GUAM
  "Гонолулу"
  PACIFIC_HONOLULU
  "Kanton"
  PACIFIC_KANTON
  "Киритимати"
  PACIFIC_KIRITIMATI
  "Кусаие"
  PACIFIC_KOSRAE
  "Кваджалейн"
  PACIFIC_KWAJALEIN
  "Маджуро"
  PACIFIC_MAJURO
  "Маркизы"
  PACIFIC_MARQUESAS
  "Мидуэй"
  PACIFIC_MIDWAY
  "Науру"
  PACIFIC_NAURU
  "Ниуэ"
  PACIFIC_NIUE
  "Норфолк"
  PACIFIC_NORFOLK
  "Нумеа"
  PACIFIC_NOUMEA
  "Паго-Паго"
  PACIFIC_PAGO_PAGO
  "Палау"
  PACIFIC_PALAU
  "Питкэрн"
  PACIFIC_PITCAIRN
  "Понпеи"
  PACIFIC_POHNPEI
  "Порт-Морсби"
  PACIFIC_PORT_MORESBY
  "Раротонга"
  PACIFIC_RAROTONGA
  "Сайпан"
  PACIFIC_SAIPAN
  "Таити"
  PACIFIC_TAHITI
  "Тарава"
  PACIFIC_TARAWA
  "Тонгатапу"
  PACIFIC_TONGATAPU
  "Уэйк"
  PACIFIC_WAKE
  "Уоллис"
  PACIFIC_WALLIS
  "UTC offset: UTC+0"
  UTC_0
  "UTC offset: UTC+0:30"
  UTC_0_30
  "UTC offset: UTC+1"
  UTC_1
  "UTC offset: UTC+10"
  UTC_10
  "UTC offset: UTC+10:30"
  UTC_10_30
  "UTC offset: UTC+11"
  UTC_11
  "UTC offset: UTC+11:30"
  UTC_11_30
  "UTC offset: UTC+12"
  UTC_12
  "UTC offset: UTC+12:45"
  UTC_12_45
  "UTC offset: UTC+13"
  UTC_13
  "UTC offset: UTC+13:45"
  UTC_13_45
  "UTC offset: UTC+14"
  UTC_14
  "UTC offset: UTC+1:30"
  UTC_1_30
  "UTC offset: UTC+2"
  UTC_2
  "UTC offset: UTC+2:30"
  UTC_2_30
  "UTC offset: UTC+3"
  UTC_3
  "UTC offset: UTC+3:30"
  UTC_3_30
  "UTC offset: UTC+4"
  UTC_4
  "UTC offset: UTC+4:30"
  UTC_4_30
  "UTC offset: UTC+5"
  UTC_5
  "UTC offset: UTC+5:30"
  UTC_5_30
  "UTC offset: UTC+5:45"
  UTC_5_45
  "UTC offset: UTC+6"
  UTC_6
  "UTC offset: UTC+6:30"
  UTC_6_30
  "UTC offset: UTC+7"
  UTC_7
  "UTC offset: UTC+7:30"
  UTC_7_30
  "UTC offset: UTC+8"
  UTC_8
  "UTC offset: UTC+8:30"
  UTC_8_30
  "UTC offset: UTC+8:45"
  UTC_8_45
  "UTC offset: UTC+9"
  UTC_9
  "UTC offset: UTC+9:30"
  UTC_9_30
}

"The Type of Identifier used to fetch a single User node. To be used along with the \"id\" field. Default is \"ID\"."
enum UserNodeIdTypeEnum {
  "The Database ID for the node"
  DATABASE_ID
  "The Email of the User"
  EMAIL
  "The hashed Global ID"
  ID
  "The slug of the User"
  SLUG
  "The URI for the node"
  URI
  "The username the User uses to login with"
  USERNAME
}

"Names of available user roles"
enum UserRoleEnum {
  "User role with specific capabilities"
  ADMINISTRATOR
  "User role with specific capabilities"
  AUTHOR
  "User role with specific capabilities"
  CONTRIBUTOR
  "User role with specific capabilities"
  CUSTOMER
  "User role with specific capabilities"
  EDITOR
  "User role with specific capabilities"
  SEO_EDITOR
  "User role with specific capabilities"
  SEO_MANAGER
  "User role with specific capabilities"
  SHOP_MANAGER
  "User role with specific capabilities"
  SUBSCRIBER
}

"Field to order the connection by"
enum UsersConnectionOrderbyEnum {
  "Order by display name"
  DISPLAY_NAME
  "Order by email address"
  EMAIL
  "Order by login"
  LOGIN
  "Preserve the login order given in the LOGIN_IN array"
  LOGIN_IN
  "Order by nice name"
  NICE_NAME
  "Preserve the nice name order given in the NICE_NAME_IN array"
  NICE_NAME_IN
  "Order by registration date"
  REGISTERED
  "Order by URL"
  URL
}

"Column used for searching for users."
enum UsersConnectionSearchColumnEnum {
  "The user's email address."
  EMAIL
  "The globally unique ID."
  ID
  "The username the User uses to login with."
  LOGIN
  "A URL-friendly name for the user. The default is the user's username."
  NICENAME
  "The URL of the user\\s website."
  URL
}

"Arguments for filtering the AboutItemToTermNodeConnection connection"
input AboutItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the CategoryToCategoryConnection connection"
input CategoryToCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the CategoryToContentNodeConnection connection"
input CategoryToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypesOfCategoryEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the CategoryToPostConnection connection"
input CategoryToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag OR another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to exclude objects in specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the CommentToCommentConnection connection"
input CommentToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the CommentToParentCommentConnection connection"
input CommentToParentCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the ContactItemToTermNodeConnection connection"
input ContactItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the ContentTypeToContentNodeConnection connection"
input ContentTypeToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Input for the createAboutItem mutation"
input CreateAboutItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createCategory mutation"
input CreateCategoryInput {
  "The slug that the category will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the category object"
  description: String
  language: LanguageCodeEnum
  "The name of the category object to mutate"
  name: String!
  "The ID of the category that should be set as the parent"
  parentId: ID
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the createComment mutation"
input CreateCommentInput {
  "The approval status of the comment."
  approved: String
  "The name of the comment's author."
  author: String
  "The email of the comment's author."
  authorEmail: String
  "The url of the comment's author."
  authorUrl: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the post object the comment belongs to."
  commentOn: Int
  "Content of the comment."
  content: String
  "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "Parent comment of current comment."
  parent: ID
  "Type of comment."
  type: String
}

"Input for the createContactItem mutation"
input CreateContactItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createFeedbackItem mutation"
input CreateFeedbackItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createFooterItem mutation"
input CreateFooterItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createFragment mutation"
input CreateFragmentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The excerpt of the object"
  excerpt: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createHeroItem mutation"
input CreateHeroItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createMediaItem mutation"
input CreateMediaItemInput {
  "Alternative text to display when mediaItem is not displayed"
  altText: String
  "The userId to assign as the author of the mediaItem"
  authorId: ID
  "The caption for the mediaItem"
  caption: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the mediaItem"
  commentStatus: String
  "The date of the mediaItem"
  date: String
  "The date (in GMT zone) of the mediaItem"
  dateGmt: String
  "Description of the mediaItem"
  description: String
  "The file name of the mediaItem"
  filePath: String
  "The file type of the mediaItem"
  fileType: MimeTypeEnum
  language: LanguageCodeEnum
  "The WordPress post ID or the graphQL postId of the parent object"
  parentId: ID
  "The ping status for the mediaItem"
  pingStatus: String
  "The slug of the mediaItem"
  slug: String
  "The status of the mediaItem"
  status: MediaItemStatusEnum
  "The title of the mediaItem"
  title: String
}

"Input for the createMessenger mutation"
input CreateMessengerInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createNavigationItem mutation"
input CreateNavigationItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createPage mutation"
input CreatePageInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createPostFormat mutation"
input CreatePostFormatInput {
  "The slug that the post_format will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_format object"
  description: String
  "The name of the post_format object to mutate"
  name: String!
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the createPost mutation"
input CreatePostInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "Set connections between the post and categories"
  categories: PostCategoriesInput
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The excerpt of the object"
  excerpt: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The ping status for the object"
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "Set connections between the post and postFormats"
  postFormats: PostPostFormatsInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "Set connections between the post and tags"
  tags: PostTagsInput
  "The title of the object"
  title: String
  "URLs queued to be pinged."
  toPing: [String]
}

"Input for the createPrivacyPolicyItem mutation"
input CreatePrivacyPolicyItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createRecruit mutation"
input CreateRecruitInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createReview mutation"
input CreateReviewInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "Set connections between the Review and postFormats"
  postFormats: ReviewPostFormatsInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createSkillCategory mutation"
input CreateSkillCategoryInput {
  "The slug that the skill_list will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the skill_list object"
  description: String
  language: LanguageCodeEnum
  "The name of the skill_list object to mutate"
  name: String!
  "The ID of the skill_list that should be set as the parent"
  parentId: ID
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the createSkill mutation"
input CreateSkillInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "Set connections between the Skill and postFormats"
  postFormats: SkillPostFormatsInput
  "Set connections between the Skill and SkillCategories"
  skillCategories: SkillSkillCategoriesInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createSocialNetwork mutation"
input CreateSocialNetworkInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the createTag mutation"
input CreateTagInput {
  "The slug that the post_tag will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_tag object"
  description: String
  language: LanguageCodeEnum
  "The name of the post_tag object to mutate"
  name: String!
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the createUser mutation"
input CreateUserInput {
  "User's AOL IM account."
  aim: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string containing content about the user."
  description: String
  "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
  displayName: String
  "A string containing the user's email address."
  email: String
  "	The user's first name."
  firstName: String
  "User's Jabber account."
  jabber: String
  "The user's last name."
  lastName: String
  "User's locale."
  locale: String
  "A string that contains a URL-friendly name for the user. The default is the user's username."
  nicename: String
  "The user's nickname, defaults to the user's username."
  nickname: String
  "A string that contains the plain text password for the user."
  password: String
  "The date the user registered. Format is Y-m-d H:i:s."
  registered: String
  "A string for whether to enable the rich editor or not. False if not empty."
  richEditing: String
  "An array of roles to be assigned to the user."
  roles: [String]
  "A string that contains the user's username for logging in."
  username: String!
  "A string containing the user's URL for the user's web site."
  websiteUrl: String
  "User's Yahoo IM account."
  yim: String
}

"Date values"
input DateInput {
  "Day of the month (from 1 to 31)"
  day: Int
  "Month number (from 1 to 12)"
  month: Int
  "4 digit year (e.g. 2017)"
  year: Int
}

"Filter the connection based on input"
input DateQueryInput {
  "Nodes should be returned after this date"
  after: DateInput
  "Nodes should be returned before this date"
  before: DateInput
  "Column to query against"
  column: PostObjectsConnectionDateColumnEnum
  "For after/before, whether exact value should be matched or not"
  compare: String
  "Day of the month (from 1 to 31)"
  day: Int
  "Hour (from 0 to 23)"
  hour: Int
  "For after/before, whether exact value should be matched or not"
  inclusive: Boolean
  "Minute (from 0 to 59)"
  minute: Int
  "Month number (from 1 to 12)"
  month: Int
  "OR or AND, how the sub-arrays should be compared"
  relation: RelationEnum
  "Second (0 to 59)"
  second: Int
  "Week of the year (from 0 to 53)"
  week: Int
  "4 digit year (e.g. 2017)"
  year: Int
}

"Input for the deleteAboutItem mutation"
input DeleteAboutItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the AboutItem to delete"
  id: ID!
}

"Input for the deleteCategory mutation"
input DeleteCategoryInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the category to delete"
  id: ID!
}

"Input for the deleteComment mutation"
input DeleteCommentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the comment should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The deleted comment ID"
  id: ID!
}

"Input for the deleteContactItem mutation"
input DeleteContactItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the ContactItem to delete"
  id: ID!
}

"Input for the deleteFeedbackItem mutation"
input DeleteFeedbackItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the FeedbackItem to delete"
  id: ID!
}

"Input for the deleteFooterItem mutation"
input DeleteFooterItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the FooterItem to delete"
  id: ID!
}

"Input for the deleteFragment mutation"
input DeleteFragmentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the Fragment to delete"
  id: ID!
}

"Input for the deleteHeroItem mutation"
input DeleteHeroItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the HeroItem to delete"
  id: ID!
}

"Input for the deleteMediaItem mutation"
input DeleteMediaItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the mediaItem should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the mediaItem to delete"
  id: ID!
}

"Input for the deleteMessenger mutation"
input DeleteMessengerInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the Messenger to delete"
  id: ID!
}

"Input for the deleteNavigationItem mutation"
input DeleteNavigationItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the NavigationItem to delete"
  id: ID!
}

"Input for the deletePage mutation"
input DeletePageInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the page to delete"
  id: ID!
}

"Input for the deletePostFormat mutation"
input DeletePostFormatInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the postFormat to delete"
  id: ID!
}

"Input for the deletePost mutation"
input DeletePostInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the post to delete"
  id: ID!
}

"Input for the deletePrivacyPolicyItem mutation"
input DeletePrivacyPolicyItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the PrivacyPolicyItem to delete"
  id: ID!
}

"Input for the deleteRecruit mutation"
input DeleteRecruitInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the Recruit to delete"
  id: ID!
}

"Input for the deleteReview mutation"
input DeleteReviewInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the Review to delete"
  id: ID!
}

"Input for the deleteSkillCategory mutation"
input DeleteSkillCategoryInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the SkillCategory to delete"
  id: ID!
}

"Input for the deleteSkill mutation"
input DeleteSkillInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the Skill to delete"
  id: ID!
}

"Input for the deleteSocialNetwork mutation"
input DeleteSocialNetworkInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Whether the object should be force deleted instead of being moved to the trash"
  forceDelete: Boolean
  "The ID of the SocialNetwork to delete"
  id: ID!
}

"Input for the deleteTag mutation"
input DeleteTagInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the tag to delete"
  id: ID!
}

"Input for the deleteUser mutation"
input DeleteUserInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the user you want to delete"
  id: ID!
  "Reassign posts and links to new User ID."
  reassignId: ID
}

"Arguments for filtering the FeedbackItemToTermNodeConnection connection"
input FeedbackItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the FooterItemToTermNodeConnection connection"
input FooterItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the FragmentToTermNodeConnection connection"
input FragmentToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the HeroItemToTermNodeConnection connection"
input HeroItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection"
input HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection"
input HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Submitted field data"
input InputField {
  "Field Id"
  id: Int
  "Field value"
  value: String
}

"Arguments for filtering the MediaItemToCommentConnection connection"
input MediaItemToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the MediaItemToTermNodeConnection connection"
input MediaItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the MenuItemToMenuItemConnection connection"
input MenuItemToMenuItemConnectionWhereArgs {
  "The ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The database ID of the parent menu object"
  parentDatabaseId: Int
  "The ID of the parent menu object"
  parentId: ID
}

"Options for filtering the connection"
input MenuItemsWhereArgs {
  "The ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
}

"Arguments for filtering the MenuToMenuItemConnection connection"
input MenuToMenuItemConnectionWhereArgs {
  "The ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The database ID of the parent menu object"
  parentDatabaseId: Int
  "The ID of the parent menu object"
  parentId: ID
}

"Arguments for filtering the NavigationItemToTermNodeConnection connection"
input NavigationItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the PageToCommentConnection connection"
input PageToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the pageToRevisionConnection connection"
input PageToRevisionConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the PageToTermNodeConnection connection"
input PageToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Set relationships between the post to categories"
input PostCategoriesInput {
  "If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [PostCategoriesNodeInput]
}

"List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostCategoriesNodeInput {
  "The description of the category. This field is used to set a description of the category if a new one is created during the mutation."
  description: String
  "The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made."
  id: ID
  "The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Arguments for filtering the PostFormatToContentNodeConnection connection"
input PostFormatToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypesOfPostFormatEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the PostFormatToPostConnection connection"
input PostFormatToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag OR another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to exclude objects in specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the PostFormatToReviewConnection connection"
input PostFormatToReviewConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the PostFormatToSkillConnection connection"
input PostFormatToSkillConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Options for ordering the connection"
input PostObjectsConnectionOrderbyInput {
  "The field to order the connection by"
  field: PostObjectsConnectionOrderbyEnum!
  "Possible directions in which to order a list of items"
  order: OrderEnum!
}

"Set relationships between the post to postFormats"
input PostPostFormatsInput {
  "If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [PostPostFormatsNodeInput]
}

"List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostPostFormatsNodeInput {
  "The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation."
  description: String
  "The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made."
  id: ID
  "The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Set relationships between the post to tags"
input PostTagsInput {
  "If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [PostTagsNodeInput]
}

"List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input PostTagsNodeInput {
  "The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation."
  description: String
  "The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made."
  id: ID
  "The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Arguments for filtering the PostToCategoryConnection connection"
input PostToCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToCommentConnection connection"
input PostToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the PostToPostFormatConnection connection"
input PostToPostFormatConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the postToRevisionConnection connection"
input PostToRevisionConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag OR another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to exclude objects in specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the PostToTagConnection connection"
input PostToTagConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the PostToTermNodeConnection connection"
input PostToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the PrivacyPolicyItemToTermNodeConnection connection"
input PrivacyPolicyItemToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RecruitToTermNodeConnection connection"
input RecruitToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Input for the registerUser mutation"
input RegisterUserInput {
  "User's AOL IM account."
  aim: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string containing content about the user."
  description: String
  "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
  displayName: String
  "A string containing the user's email address."
  email: String
  "	The user's first name."
  firstName: String
  "User's Jabber account."
  jabber: String
  "The user's last name."
  lastName: String
  "User's locale."
  locale: String
  "A string that contains a URL-friendly name for the user. The default is the user's username."
  nicename: String
  "The user's nickname, defaults to the user's username."
  nickname: String
  "A string that contains the plain text password for the user."
  password: String
  "The date the user registered. Format is Y-m-d H:i:s."
  registered: String
  "A string for whether to enable the rich editor or not. False if not empty."
  richEditing: String
  "A string that contains the user's username."
  username: String!
  "A string containing the user's URL for the user's web site."
  websiteUrl: String
  "User's Yahoo IM account."
  yim: String
}

"Input for the resetUserPassword mutation"
input ResetUserPasswordInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Password reset key"
  key: String
  "The user's login (username)."
  login: String
  "The new password."
  password: String
}

"Input for the restoreComment mutation"
input RestoreCommentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the comment to be restored"
  id: ID!
}

"Set relationships between the Review to postFormats"
input ReviewPostFormatsInput {
  "If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [ReviewPostFormatsNodeInput]
}

"List of postFormats to connect the Review to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input ReviewPostFormatsNodeInput {
  "The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation."
  description: String
  "The ID of the postFormat. If present, this will be used to connect to the Review. If no existing postFormat exists with this ID, no connection will be made."
  id: ID
  "The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Arguments for filtering the ReviewToPostFormatConnection connection"
input ReviewToPostFormatConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the ReviewToTermNodeConnection connection"
input ReviewToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToAboutItemConnection connection"
input RootQueryToAboutItemConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by AboutItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToCategoryConnection connection"
input RootQueryToCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Filter by Categorys by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToCommentConnection connection"
input RootQueryToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the RootQueryToContactItemConnection connection"
input RootQueryToContactItemConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by ContactItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToContentNodeConnection connection"
input RootQueryToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter content nodes by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToContentRevisionUnionConnection connection"
input RootQueryToContentRevisionUnionConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToFeedbackItemConnection connection"
input RootQueryToFeedbackItemConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by FeedbackItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToFooterItemConnection connection"
input RootQueryToFooterItemConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by FooterItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToFragmentConnection connection"
input RootQueryToFragmentConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by Fragments by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToHeroItemConnection connection"
input RootQueryToHeroItemConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by HeroItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToMediaItemConnection connection"
input RootQueryToMediaItemConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by MediaItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToMenuConnection connection"
input RootQueryToMenuConnectionWhereArgs {
  "The ID of the object"
  id: Int
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The slug of the menu to query items for"
  slug: String
}

"Arguments for filtering the RootQueryToMenuItemConnection connection"
input RootQueryToMenuItemConnectionWhereArgs {
  "The ID of the object"
  id: Int
  language: LanguageCodeFilterEnum
  "The menu location for the menu being queried"
  location: MenuLocationEnum
  "The database ID of the parent menu object"
  parentDatabaseId: Int
  "The ID of the parent menu object"
  parentId: ID
}

"Arguments for filtering the RootQueryToMessengerConnection connection"
input RootQueryToMessengerConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToNavigationItemConnection connection"
input RootQueryToNavigationItemConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by NavigationItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToPageConnection connection"
input RootQueryToPageConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by Pages by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToPostConnection connection"
input RootQueryToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by Posts by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag OR another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to exclude objects in specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToPostFormatConnection connection"
input RootQueryToPostFormatConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToPrivacyPolicyItemConnection connection"
input RootQueryToPrivacyPolicyItemConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by PrivacyPolicyItems by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToRecruitConnection connection"
input RootQueryToRecruitConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by Recruits by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToReviewConnection connection"
input RootQueryToReviewConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by Reviews by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToSkillCategoryConnection connection"
input RootQueryToSkillCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Filter by SkillCategorys by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToSkillConnection connection"
input RootQueryToSkillConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Filter by Skills by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToSocialNetworkConnection connection"
input RootQueryToSocialNetworkConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the RootQueryToTagConnection connection"
input RootQueryToTagConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Filter by Tags by language code (Polylang)"
  language: LanguageCodeFilterEnum
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToTermNodeConnection connection"
input RootQueryToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the RootQueryToUserConnection connection"
input RootQueryToUserConnectionWhereArgs {
  "Array of userIds to exclude."
  exclude: [Int]
  "Pass an array of post types to filter results to users who have published posts in those post types."
  hasPublishedPosts: [ContentTypeEnum]
  "Array of userIds to include."
  include: [Int]
  "The user login."
  login: String
  "An array of logins to include. Users matching one of these logins will be included in results."
  loginIn: [String]
  "An array of logins to exclude. Users matching one of these logins will not be included in results."
  loginNotIn: [String]
  "The user nicename."
  nicename: String
  "An array of nicenames to include. Users matching one of these nicenames will be included in results."
  nicenameIn: [String]
  "An array of nicenames to exclude. Users matching one of these nicenames will not be included in results."
  nicenameNotIn: [String]
  "What paramater to use to order the objects by."
  orderby: [UsersConnectionOrderbyInput]
  "An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role."
  role: UserRoleEnum
  "An array of role names. Matched users must have at least one of these roles."
  roleIn: [UserRoleEnum]
  "An array of role names to exclude. Users matching one or more of these roles will not be included in results."
  roleNotIn: [UserRoleEnum]
  "Search keyword. Searches for possible string matches on columns. When \"searchColumns\" is left empty, it tries to determine which column to search in based on search string."
  search: String
  "Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'."
  searchColumns: [UsersConnectionSearchColumnEnum]
}

"Input for the sendPasswordResetEmail mutation"
input SendPasswordResetEmailInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string that contains the user's username or email address."
  username: String!
}

"Arguments for filtering the SkillCategoryToContentNodeConnection connection"
input SkillCategoryToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypesOfSkillCategoryEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the SkillCategoryToSkillCategoryConnection connection"
input SkillCategoryToSkillCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the SkillCategoryToSkillConnection connection"
input SkillCategoryToSkillConnectionWhereArgs {
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Set relationships between the Skill to postFormats"
input SkillPostFormatsInput {
  "If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [SkillPostFormatsNodeInput]
}

"List of postFormats to connect the Skill to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input SkillPostFormatsNodeInput {
  "The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation."
  description: String
  "The ID of the postFormat. If present, this will be used to connect to the Skill. If no existing postFormat exists with this ID, no connection will be made."
  id: ID
  "The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Set relationships between the Skill to SkillCategories"
input SkillSkillCategoriesInput {
  "If true, this will append the SkillCategory to existing related SkillCategories. If false, this will replace existing relationships. Default true."
  append: Boolean
  "The input list of items to set."
  nodes: [SkillSkillCategoriesNodeInput]
}

"List of SkillCategories to connect the Skill to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists."
input SkillSkillCategoriesNodeInput {
  "The description of the SkillCategory. This field is used to set a description of the SkillCategory if a new one is created during the mutation."
  description: String
  "The ID of the SkillCategory. If present, this will be used to connect to the Skill. If no existing SkillCategory exists with this ID, no connection will be made."
  id: ID
  "The name of the SkillCategory. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field."
  name: String
  "The slug of the SkillCategory. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation."
  slug: String
}

"Arguments for filtering the SkillToPostFormatConnection connection"
input SkillToPostFormatConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the SkillToSkillCategoryConnection connection"
input SkillToSkillCategoryConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Arguments for filtering the SkillToTermNodeConnection connection"
input SkillToTermNodeConnectionWhereArgs {
  "Unique cache key to be produced when this query is stored in an object cache. Default is 'core'."
  cacheDomain: String
  "Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0."
  childOf: Int
  "True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false."
  childless: Boolean
  "Retrieve terms where the description is LIKE the input value. Default empty."
  descriptionLike: String
  "Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array."
  exclude: [ID]
  "Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array."
  excludeTree: [ID]
  "Whether to hide terms not assigned to any posts. Accepts true or false. Default false"
  hideEmpty: Boolean
  "Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true."
  hierarchical: Boolean
  "Array of term ids to include. Default empty array."
  include: [ID]
  "Array of names to return term(s) for. Default empty."
  name: [String]
  "Retrieve terms where the name is LIKE the input value. Default empty."
  nameLike: String
  "Array of object IDs. Results will be limited to terms associated with these objects."
  objectIds: [ID]
  "Direction the connection should be ordered in"
  order: OrderEnum
  "Field(s) to order terms by. Defaults to 'name'."
  orderby: TermObjectsConnectionOrderbyEnum
  "Whether to pad the quantity of a term's children in the quantity of each term's \"count\" object variable. Default false."
  padCounts: Boolean
  "Parent term ID to retrieve direct-child terms of. Default empty."
  parent: Int
  "Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty."
  search: String
  "Array of slugs to return term(s) for. Default empty."
  slug: [String]
  "The Taxonomy to filter terms by"
  taxonomies: [TaxonomyEnum]
  "Array of term taxonomy IDs, to match when querying terms."
  termTaxonomId: [ID]
  "Whether to prime meta caches for matched terms. Default true."
  updateTermMetaCache: Boolean
}

"Input for the submitForm mutation"
input SubmitFormInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Submited form data"
  data: [InputField]
  "Submited form Id"
  formId: Int
}

"Arguments for filtering the TagToContentNodeConnection connection"
input TagToContentNodeConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypesOfTagEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the TagToPostConnection connection"
input TagToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag OR another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to exclude objects in specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Input for the updateAboutItem mutation"
input UpdateAboutItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the AboutItem object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the UpdateCategory mutation"
input UpdateCategoryInput {
  "The slug that the category will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the category object"
  description: String
  "The ID of the category object to update"
  id: ID!
  language: LanguageCodeEnum
  "The name of the category object to mutate"
  name: String
  "The ID of the category that should be set as the parent"
  parentId: ID
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the updateComment mutation"
input UpdateCommentInput {
  "The approval status of the comment."
  approved: String
  "The name of the comment's author."
  author: String
  "The email of the comment's author."
  authorEmail: String
  "The url of the comment's author."
  authorUrl: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The ID of the post object the comment belongs to."
  commentOn: Int
  "Content of the comment."
  content: String
  "The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the comment being updated."
  id: ID!
  "Parent comment of current comment."
  parent: ID
  "Type of comment."
  type: String
}

"Input for the updateContactItem mutation"
input UpdateContactItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the ContactItem object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateFeedbackItem mutation"
input UpdateFeedbackItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the FeedbackItem object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateFooterItem mutation"
input UpdateFooterItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the FooterItem object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateFragment mutation"
input UpdateFragmentInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The excerpt of the object"
  excerpt: String
  "The ID of the Fragment object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateHeroItem mutation"
input UpdateHeroItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the HeroItem object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateMediaItem mutation"
input UpdateMediaItemInput {
  "Alternative text to display when mediaItem is not displayed"
  altText: String
  "The userId to assign as the author of the mediaItem"
  authorId: ID
  "The caption for the mediaItem"
  caption: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the mediaItem"
  commentStatus: String
  "The date of the mediaItem"
  date: String
  "The date (in GMT zone) of the mediaItem"
  dateGmt: String
  "Description of the mediaItem"
  description: String
  "The file name of the mediaItem"
  filePath: String
  "The file type of the mediaItem"
  fileType: MimeTypeEnum
  "The ID of the mediaItem object"
  id: ID!
  language: LanguageCodeEnum
  "The WordPress post ID or the graphQL postId of the parent object"
  parentId: ID
  "The ping status for the mediaItem"
  pingStatus: String
  "The slug of the mediaItem"
  slug: String
  "The status of the mediaItem"
  status: MediaItemStatusEnum
  "The title of the mediaItem"
  title: String
}

"Input for the updateMessenger mutation"
input UpdateMessengerInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the Messenger object"
  id: ID!
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateNavigationItem mutation"
input UpdateNavigationItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the NavigationItem object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updatePage mutation"
input UpdatePageInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the page object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the UpdatePostFormat mutation"
input UpdatePostFormatInput {
  "The slug that the post_format will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_format object"
  description: String
  "The ID of the postFormat object to update"
  id: ID!
  "The name of the post_format object to mutate"
  name: String
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the updatePost mutation"
input UpdatePostInput {
  "The userId to assign as the author of the object"
  authorId: ID
  "Set connections between the post and categories"
  categories: PostCategoriesInput
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The comment status for the object"
  commentStatus: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The excerpt of the object"
  excerpt: String
  "The ID of the post object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The ping status for the object"
  pingStatus: String
  "URLs that have been pinged."
  pinged: [String]
  "Set connections between the post and postFormats"
  postFormats: PostPostFormatsInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "Set connections between the post and tags"
  tags: PostTagsInput
  "The title of the object"
  title: String
  "URLs queued to be pinged."
  toPing: [String]
}

"Input for the updatePrivacyPolicyItem mutation"
input UpdatePrivacyPolicyItemInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the PrivacyPolicyItem object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateRecruit mutation"
input UpdateRecruitInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the Recruit object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateReview mutation"
input UpdateReviewInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the Review object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "Set connections between the Review and postFormats"
  postFormats: ReviewPostFormatsInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateSettings mutation"
input UpdateSettingsInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "Разрешить оставлять комментарии к новым записям."
  discussionSettingsDefaultCommentStatus: String
  "Разрешить ссылки оповещения с других блогов (уведомления и обратные ссылки) на новые статьи."
  discussionSettingsDefaultPingStatus: String
  "Общий формат даты."
  generalSettingsDateFormat: String
  "Слоган сайта."
  generalSettingsDescription: String
  "Этот адрес используется в целях администрирования. Например, для уведомления о новых пользователях."
  generalSettingsEmail: String
  "Код локали WordPress."
  generalSettingsLanguage: String
  "Первый день недели."
  generalSettingsStartOfWeek: Int
  "Общий формат времени."
  generalSettingsTimeFormat: String
  "Город в той же временной зоне что и у вас."
  generalSettingsTimezone: String
  "Название сайта."
  generalSettingsTitle: String
  "Адрес сайта (URL)"
  generalSettingsUrl: String
  "Максимум страниц блога для показа."
  readingSettingsPostsPerPage: Int
  "Рубрика для записей по умолчанию."
  writingSettingsDefaultCategory: Int
  "Формат записей по умолчанию."
  writingSettingsDefaultPostFormat: String
  "Преобразовывать смайлики наподобие :-) и :-P в картинки при показе."
  writingSettingsUseSmilies: Boolean
}

"Input for the UpdateSkillCategory mutation"
input UpdateSkillCategoryInput {
  "The slug that the skill_list will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the skill_list object"
  description: String
  "The ID of the SkillCategory object to update"
  id: ID!
  language: LanguageCodeEnum
  "The name of the skill_list object to mutate"
  name: String
  "The ID of the skill_list that should be set as the parent"
  parentId: ID
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the updateSkill mutation"
input UpdateSkillInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the Skill object"
  id: ID!
  language: LanguageCodeEnum
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The ID of the parent object"
  parentId: ID
  "The password used to protect the content of the object"
  password: String
  "Set connections between the Skill and postFormats"
  postFormats: SkillPostFormatsInput
  "Set connections between the Skill and SkillCategories"
  skillCategories: SkillSkillCategoriesInput
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the updateSocialNetwork mutation"
input UpdateSocialNetworkInput {
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The content of the object"
  content: String
  "The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, \"2017\" as the input will use current date with timestamp 20:17 "
  date: String
  "The ID of the SocialNetwork object"
  id: ID!
  "A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types."
  menuOrder: Int
  "The password used to protect the content of the object"
  password: String
  "The slug of the object"
  slug: String
  "The status of the object"
  status: PostStatusEnum
  "The title of the object"
  title: String
}

"Input for the UpdateTag mutation"
input UpdateTagInput {
  "The slug that the post_tag will be an alias of"
  aliasOf: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "The description of the post_tag object"
  description: String
  "The ID of the tag object to update"
  id: ID!
  language: LanguageCodeEnum
  "The name of the post_tag object to mutate"
  name: String
  "If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name."
  slug: String
}

"Input for the updateUser mutation"
input UpdateUserInput {
  "User's AOL IM account."
  aim: String
  "This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions."
  clientMutationId: String
  "A string containing content about the user."
  description: String
  "A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user)."
  displayName: String
  "A string containing the user's email address."
  email: String
  "	The user's first name."
  firstName: String
  "The ID of the user"
  id: ID!
  "User's Jabber account."
  jabber: String
  "The user's last name."
  lastName: String
  "User's locale."
  locale: String
  "A string that contains a URL-friendly name for the user. The default is the user's username."
  nicename: String
  "The user's nickname, defaults to the user's username."
  nickname: String
  "A string that contains the plain text password for the user."
  password: String
  "The date the user registered. Format is Y-m-d H:i:s."
  registered: String
  "A string for whether to enable the rich editor or not. False if not empty."
  richEditing: String
  "An array of roles to be assigned to the user."
  roles: [String]
  "A string containing the user's URL for the user's web site."
  websiteUrl: String
  "User's Yahoo IM account."
  yim: String
}

"Arguments for filtering the UserToCommentConnection connection"
input UserToCommentConnectionWhereArgs {
  "Comment author email address."
  authorEmail: String
  "Array of author IDs to include comments for."
  authorIn: [ID]
  "Array of author IDs to exclude comments for."
  authorNotIn: [ID]
  "Comment author URL."
  authorUrl: String
  "Array of comment IDs to include."
  commentIn: [ID]
  "Array of IDs of users whose unapproved comments will be returned by the query regardless of status."
  commentNotIn: [ID]
  "Include comments of a given type."
  commentType: String
  "Include comments from a given array of comment types."
  commentTypeIn: [String]
  "Exclude comments from a given array of comment types."
  commentTypeNotIn: String
  "Content object author ID to limit results by."
  contentAuthor: [ID]
  "Array of author IDs to retrieve comments for."
  contentAuthorIn: [ID]
  "Array of author IDs *not* to retrieve comments for."
  contentAuthorNotIn: [ID]
  "Limit results to those affiliated with a given content object ID."
  contentId: ID
  "Array of content object IDs to include affiliated comments for."
  contentIdIn: [ID]
  "Array of content object IDs to exclude affiliated comments for."
  contentIdNotIn: [ID]
  "Content object name to retrieve affiliated comments for."
  contentName: String
  "Content Object parent ID to retrieve affiliated comments for."
  contentParent: Int
  "Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value."
  contentStatus: [PostStatusEnum]
  "Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value."
  contentType: [ContentTypeEnum]
  "Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty"
  includeUnapproved: [ID]
  "Karma score to retrieve matching comments for."
  karma: Int
  "The cardinality of the order of the connection"
  order: OrderEnum
  "Field to order the comments by."
  orderby: CommentsConnectionOrderbyEnum
  "Parent ID of comment to retrieve children of."
  parent: Int
  "Array of parent IDs of comments to retrieve children for."
  parentIn: [ID]
  "Array of parent IDs of comments *not* to retrieve children for."
  parentNotIn: [ID]
  "Search term(s) to retrieve matching comments for."
  search: String
  "Comment status to limit results by."
  status: String
  "Include comments for a specific user ID."
  userId: ID
}

"Arguments for filtering the UserToContentRevisionUnionConnection connection"
input UserToContentRevisionUnionConnectionWhereArgs {
  "The Types of content to filter"
  contentTypes: [ContentTypeEnum]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the UserToMediaItemConnection connection"
input UserToMediaItemConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the UserToPageConnection connection"
input UserToPageConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Title of the object"
  title: String
}

"Arguments for filtering the UserToPostConnection connection"
input UserToPostConnectionWhereArgs {
  "The user that's connected as the author of the object. Use the userId for the author object."
  author: Int
  "Find objects connected to author(s) in the array of author's userIds"
  authorIn: [ID]
  "Find objects connected to the author by the author's nicename"
  authorName: String
  "Find objects NOT connected to author(s) in the array of author's userIds"
  authorNotIn: [ID]
  "Category ID"
  categoryId: Int
  "Array of category IDs, used to display objects from one category OR another"
  categoryIn: [ID]
  "Use Category Slug"
  categoryName: String
  "Array of category IDs, used to display objects from one category OR another"
  categoryNotIn: [ID]
  "Filter the connection based on dates"
  dateQuery: DateQueryInput
  "True for objects with passwords; False for objects without passwords; null for all objects with or without passwords"
  hasPassword: Boolean
  "Specific ID of the object"
  id: Int
  "Array of IDs for the objects to retrieve"
  in: [ID]
  "Get objects with a specific mimeType property"
  mimeType: MimeTypeEnum
  "Slug / post_name of the object"
  name: String
  "Specify objects to retrieve. Use slugs"
  nameIn: [String]
  "Specify IDs NOT to retrieve. If this is used in the same query as \"in\", it will be ignored"
  notIn: [ID]
  "What paramater to use to order the objects by."
  orderby: [PostObjectsConnectionOrderbyInput]
  "Use ID to return only children. Use 0 to return only top-level items"
  parent: ID
  "Specify objects whose parent is in an array"
  parentIn: [ID]
  "Specify posts whose parent is not in an array"
  parentNotIn: [ID]
  "Show posts with a specific password."
  password: String
  "Show Posts based on a keyword search"
  search: String
  "Retrieve posts where post status is in an array."
  stati: [PostStatusEnum]
  "Show posts with a specific status."
  status: PostStatusEnum
  "Tag Slug"
  tag: String
  "Use Tag ID"
  tagId: String
  "Array of tag IDs, used to display objects from one tag OR another"
  tagIn: [ID]
  "Array of tag IDs, used to display objects from one tag OR another"
  tagNotIn: [ID]
  "Array of tag slugs, used to display objects from one tag OR another"
  tagSlugAnd: [String]
  "Array of tag slugs, used to exclude objects in specified tags"
  tagSlugIn: [String]
  "Title of the object"
  title: String
}

"Options for ordering the connection"
input UsersConnectionOrderbyInput {
  "The field name used to sort the results."
  field: UsersConnectionOrderbyEnum!
  "The cardinality of the order of the connection"
  order: OrderEnum
}
